import{_ as e,c as t,o as l,ai as r}from"./chunks/framework.Cw7UrGgX.js";const c=JSON.parse('{"title":"浏览器渲染原理","description":"","frontmatter":{"title":"浏览器渲染原理","tags":["浏览器","渲染原理","reflow","repaint"],"date":"2024-03-11T00:00:00.000Z"},"headers":[],"relativePath":"posts/浏览器渲染原理.md","filePath":"posts/浏览器渲染原理.md","lastUpdated":1742611062000}'),o={name:"posts/浏览器渲染原理.md"};function p(i,a,u,s,h,d){return l(),t("div",null,a[0]||(a[0]=[r('<h2 id="浏览器是如何渲染页面的" tabindex="-1">浏览器是如何渲染页面的 <a class="header-anchor" href="#浏览器是如何渲染页面的" aria-label="Permalink to &quot;浏览器是如何渲染页面的&quot;">​</a></h2><h3 id="什么是渲染" tabindex="-1">什么是渲染 <a class="header-anchor" href="#什么是渲染" aria-label="Permalink to &quot;什么是渲染&quot;">​</a></h3><p>把 html 字符串转换为像素点信息的过程就可以叫做渲染</p><h3 id="渲染的开始" tabindex="-1">渲染的开始 <a class="header-anchor" href="#渲染的开始" aria-label="Permalink to &quot;渲染的开始&quot;">​</a></h3><p>当浏览器的网络线程拿到 HTML 文档后，会产生一个渲染任务，并将其放到队列中。</p><p>在事件循环机制的作用下，渲染主线程取出队列中的渲染任务，开启渲染流程。</p><h3 id="渲染流水线" tabindex="-1">渲染流水线 <a class="header-anchor" href="#渲染流水线" aria-label="Permalink to &quot;渲染流水线&quot;">​</a></h3><ol><li><p>解析 HTML 文档</p></li><li><p>样式计算</p></li><li><p>布局</p></li><li><p>分层</p></li><li><p>绘制</p></li><li><p>分块</p></li><li><p>光栅化</p></li><li><p>画</p></li></ol><h3 id="_1-解析-html-parse-html" tabindex="-1">1. 解析 HTML - Parse HTML <a class="header-anchor" href="#_1-解析-html-parse-html" aria-label="Permalink to &quot;1. 解析 HTML - Parse HTML&quot;">​</a></h3><p>最终结果是把 html 文档转换成<code>DOM树(文档对象模型)</code>和<code>CSSOM树(CSS 对象模型)</code></p><p>渲染的第一步是解析 html。</p><p>解析过程中<u>遇到 css 解析 css</u>，<u>遇到 js 执行 js</u>。为了提高解析效率，浏览器在开始解析前，会启动一个<u>预解析的线程</u>，率先<u>下载</u>html 中的<u>外部 css 文件</u>和<u>外部的 js 文件</u>。</p><p>如果主线程解析到 link 位置，此时外部的 css 文件还没有下载解析好，主线程不会等待，继续后续 html 的解析。这就是<u>css 不会阻塞 html 解析</u>的根本原因。</p><p>如果主线程解析到 script 位置，会停止解析 html，转而执行 js 代码或者等待 js 文件下载完毕并执行后，才继续解析 html。这是因为，<u>js 代码执行的过程中可能会修改当前构建好的 dom</u>树，所以必须先暂停解析。<u>这就是 js 会阻塞 html 解析的根本原因</u>。</p><p>第一步完成后，会得到 dom 树和 cssom 树，浏览器的默认样式会包含在 cssom 树中。</p><h3 id="_2-样式计算-recalculate-style" tabindex="-1">2. 样式计算 - Recalculate Style <a class="header-anchor" href="#_2-样式计算-recalculate-style" aria-label="Permalink to &quot;2. 样式计算 - Recalculate Style&quot;">​</a></h3><p>主线程会遍历得到的 dom 树，依次为树中的每个节点计算出它最终的样式，称之为<code>Computed Style</code>。</p><p>在这一过程中，很多预设值会变成绝对值，比如 red 会变成 rgb(255,0,0)；相对单位会变成绝对单位，比如 em 会变成 px</p><h3 id="_3-布局-layout" tabindex="-1">3. 布局 - Layout <a class="header-anchor" href="#_3-布局-layout" aria-label="Permalink to &quot;3. 布局 - Layout&quot;">​</a></h3><p>主线程在进行 layout 计算的时候也会生成相应的 layout 树，需要注意的是，<u>dom 树和 layout 树并不是一一对应的</u>。</p><p>比如<code>display: none</code>的节点没有几何信息，因此不会生成到布局树；又比如一些伪元素在 dom 节点中不存在，但它们拥有几何信息，所以会生成到布局树中。还有匿名行盒、匿名块盒等等这些都会导致 dom 树和布局树无法一一对应。</p><h3 id="_4-分层-layer" tabindex="-1">4. 分层 - Layer <a class="header-anchor" href="#_4-分层-layer" aria-label="Permalink to &quot;4. 分层 - Layer&quot;">​</a></h3><p>主线程会使用一套复杂的策略对整个布局树进行分层。</p><p>分层的好处是，如果一个节点经常进行变动，则只需要对该层进行后续处理，而不需要对整个树进行处理，提升了效率。</p><p><u>可以通过<code>will-change</code>属性主动影响浏览器的分层结果</u>。</p><h3 id="_5-绘制-paint" tabindex="-1">5. 绘制 - Paint <a class="header-anchor" href="#_5-绘制-paint" aria-label="Permalink to &quot;5. 绘制 - Paint&quot;">​</a></h3><p>主线程会为每个层<u>单独生成</u>绘制指令集，用于<u>描述</u>这一层该<u>如何画出来</u>。</p><h3 id="_6-分块-tiling" tabindex="-1">6. 分块 - Tiling <a class="header-anchor" href="#_6-分块-tiling" aria-label="Permalink to &quot;6. 分块 - Tiling&quot;">​</a></h3><p>上一步完成后，主线程会将每个图层的绘制信息交给合成线程，剩余工作由合成线程完成。</p><p>合成线程首先对每个<u>图层</u>进行<u>分块</u>，将其划分成许多的小区域。这一过程是由<u>多个线程</u>完成的。</p><h3 id="_7-光栅化-raster" tabindex="-1">7. 光栅化 - Raster <a class="header-anchor" href="#_7-光栅化-raster" aria-label="Permalink to &quot;7. 光栅化 - Raster&quot;">​</a></h3><p>分块完成后，进入光栅化阶段。</p><p>合成线程会将分块信息交给 gpu 进程，gpu 会以极高的速度进行光栅化。</p><p><u>光栅化的结果就是一块一块的位图</u>。</p><h3 id="_8-画-draw" tabindex="-1">8. 画 - Draw <a class="header-anchor" href="#_8-画-draw" aria-label="Permalink to &quot;8. 画 - Draw&quot;">​</a></h3><p>最后一个阶段就是画</p><p>合成线程从 gpu 进程中拿到每个块的位图后，生成一个个<u><code>指引（quad）</code>信息</u>。</p><p>指引会标识出每个位图应该画到屏幕的哪个位置，并且会考虑旋转、缩放等变形。</p><p><u>变形发生在合成线程，与渲染主线程无关，这就是<code>transform</code>效率高的原因</u>。</p><p>合成线程会把<code>quad</code>信息交给 gpu 进程，由 gpu 进程调用 gpu 硬件，最终完成屏幕图像的显示。</p><h3 id="关于-reflow" tabindex="-1">关于 reflow <a class="header-anchor" href="#关于-reflow" aria-label="Permalink to &quot;关于 reflow&quot;">​</a></h3><p><u>reflow 的本质就是重新计算 layout 树</u>。</p><p>当进行了影响布局树的操作后，就需要重新计算布局树，触发 layout 流程。</p><p>为了避免连续多次的布局树反复计算，浏览器会合并这些操作，当 js 代码全部完成后再进行统一的布局树计算。所以，改动属性造成的 reflow 是异步完成的。</p><p>也正是因为如此，当我们在更改布局属性后立即获取它们的信息，就有可能造成无法获取到最新布局信息的结果。</p><p>浏览器最终在反复权衡之下，决定获取属性时立即 reflow。</p><h3 id="关于-repaint" tabindex="-1">关于 repaint <a class="header-anchor" href="#关于-repaint" aria-label="Permalink to &quot;关于 repaint&quot;">​</a></h3><p>repaint 的本质就是重新根据分层信息计算了绘制指令。</p><p>当改动了可见样式后，就需要重新计算，触发 repaint 流程。</p><p>由于元素的布局信息也属于可见样式，所以 reflow 一定会引起 repaint</p>',50)]))}const m=e(o,[["render",p]]);export{c as __pageData,m as default};
