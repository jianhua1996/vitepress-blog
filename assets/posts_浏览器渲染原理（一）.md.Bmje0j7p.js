import{_ as k,C as d,c,o as l,a4 as a,G as n,b as r,j as p,w as i,a as t,a5 as h}from"./chunks/framework.BicIBzvP.js";const y=JSON.parse('{"title":"浏览器工作原理（一）","description":"","frontmatter":{"title":"浏览器工作原理（一）","tags":["浏览器","渲染原理","reflow","repaint","关键渲染路径"],"date":"2025-6-29","next":{"text":"浏览器工作原理（二）","link":"/posts/浏览器渲染原理（二）.md"}},"headers":[],"relativePath":"posts/浏览器渲染原理（一）.md","filePath":"posts/浏览器渲染原理（一）.md","lastUpdated":1753621617000}'),g={name:"posts/浏览器渲染原理（一）.md"};function A(u,s,b,E,B,m){const o=d("ImageBuilder"),e=d("Mermaid");return l(),c("div",null,[s[6]||(s[6]=a('<h2 id="浏览器的多进程架构" tabindex="-1">浏览器的多进程架构 <a class="header-anchor" href="#浏览器的多进程架构" aria-label="Permalink to &quot;浏览器的多进程架构&quot;">​</a></h2><h3 id="进程与线程" tabindex="-1">进程与线程 <a class="header-anchor" href="#进程与线程" aria-label="Permalink to &quot;进程与线程&quot;">​</a></h3><p><strong>进程</strong>：指计算机中已执行的程序，曾经是分时系统的基本运作单位。在面向进程设计的系统中，是程序的基本执行实体；在面向线程设计的系统中，进程本身不是基本执行单位，而是线程的容器。<br><strong>线程</strong>：在计算机科学中，是将进程划分为两个或多个线程（实例）或子进程，由单处理器（单线程）或多处理器（多线程）或多核处理系统并发执行。<br> 参考：<a href="https://zh.wikipedia.org/zh-cn/%E8%A1%8C%E7%A8%8B" target="_blank" rel="noreferrer">进程</a>、<a href="https://zh.wikipedia.org/zh-cn/%E7%BA%BF%E7%A8%8B" target="_blank" rel="noreferrer">线程</a></p><h3 id="浏览器的进程架构" tabindex="-1">浏览器的进程架构 <a class="header-anchor" href="#浏览器的进程架构" aria-label="Permalink to &quot;浏览器的进程架构&quot;">​</a></h3><p><strong>现代浏览器一般都是多进程架构</strong>，以 Chrome 为例，一个浏览器会启动包括以下进程在内的多个进程，每个进程都有自己的内存空间，进程之间通过 <code>IPC</code> 进行通信：</p><ul><li>浏览器主进程</li><li>GPU 进程</li><li>网络进程</li><li>存储进程</li><li>渲染进程</li><li>插件进程</li></ul><p>下面是浏览器的进程截图：</p>',7)),n(o,{source:["浏览器进程架构.png"],size:"medium"}),s[7]||(s[7]=a("<p>其中，<strong>渲染进程</strong>是我们最应该关注的进程，它负责通过一系列渲染步骤（又称作浏览器渲染管线）将 HTML、JavaScript、CSS、图片等资源最终解析为可以显示和交互的页面。</p><p><strong>浏览器中的渲染进程不止会有一个</strong>，通常来讲，我们每次在浏览器中打开一个新的标签页，就会启动一个新的渲染进程。如果是在当前页面打开或跳转，浏览器会判断新页面是否与当前页面属于<strong>同站页面</strong>：</p><blockquote><p>所谓同站：指的是两个 URL 具有<strong>相同的有效顶级域名 + 二级域名部分</strong>，也就是 eTLD+1</p></blockquote><p><strong>如果是同站页面，则复用当前页面的渲染进程，否则就会启动一个新的渲染进程</strong>。</p><blockquote><p>对比同源：指的是 <strong>协议(Scheme)</strong>、<strong>主机名(Hostname)</strong> 和 <strong>端口号(Port)</strong> 完全相同。</p></blockquote><p>如下图所示：</p>",6)),n(o,{source:["浏览器进程架构-同站进程复用1.png","浏览器进程架构-同站进程复用2.png","浏览器进程架构-同站进程复用3.png"],size:"medium"}),s[8]||(s[8]=a('<p><code>baidu.com</code> 和 <code>tieba.baidu.com</code> 复用同一个浏览器进程，因为它们是同站页面。<br> 而 <code>baidu.com</code> 和 <code>taobao.com</code> 则不会复用同一个浏览器进程，因为它们不是同站页面。</p><blockquote><p>多进程架构的优势：崩溃隔离，沙箱化等，参考<a href="https://developer.chrome.com/blog/inside-browser-part1?hl=zh-cn#the_benefit_of_multi-process_architecture_in_chrome" target="_blank" rel="noreferrer">Chrome 中多进程架构的好处</a></p></blockquote><hr><h2 id="浏览器渲染管线" tabindex="-1">浏览器渲染管线 <a class="header-anchor" href="#浏览器渲染管线" aria-label="Permalink to &quot;浏览器渲染管线&quot;">​</a></h2><p>我们把从输入数据（通常是 HTML、CSS、JavaScript）到显示结果（屏幕上看到的画面）这整个过程称为浏览器的渲染流程，或者叫渲染管线。</p><p>按照渲染的时间顺序，渲染管线可分为如下几个子阶段：</p><ol><li>构建 DOM 树</li><li>样式计算</li><li>布局阶段</li><li>分层阶段</li><li>绘制阶段</li><li>分块</li><li>光栅化</li><li>合成</li></ol><p>这个过程也被称为<a href="https://developer.mozilla.org/en-US/docs/Web/Performance/Critical_rendering_path" target="_blank" rel="noreferrer">关键渲染路径(Critical Rendering Path)</a>。</p><h3 id="_1-html-解析与-dom-树构建流程" tabindex="-1">1. HTML 解析与 DOM 树构建流程 <a class="header-anchor" href="#_1-html-解析与-dom-树构建流程" aria-label="Permalink to &quot;1. HTML 解析与 DOM 树构建流程&quot;">​</a></h3><p>HTML 解析是浏览器渲染管线的第一步，它将 HTML 文档转换为 DOM 树。这个过程遵循<a href="https://html.spec.whatwg.org/multipage/parsing.html#parsing" target="_blank" rel="noreferrer">WHATWG HTML 标准</a>中定义的算法。</p><h4 id="_1-1-字节流解码-byte-decoding" tabindex="-1">1.1 字节流解码（Byte Decoding） <a class="header-anchor" href="#_1-1-字节流解码-byte-decoding" aria-label="Permalink to &quot;1.1 字节流解码（Byte Decoding）&quot;">​</a></h4><p><strong>目标</strong>：将原始字节流转换为可读字符<br><strong>编码识别顺序</strong>：</p><ol><li><a href="https://encoding.spec.whatwg.org/#bom-sniff" target="_blank" rel="noreferrer">BOM 嗅探</a> (BOM sniffing)（最高优先级）</li><li>检查 HTTP 响应头中的<code>Content-Type</code>字段（如<code>Content-Type: text/html; charset=UTF-8</code>）</li><li>检查文档是否与一个已确定编码的 <code>Document</code> 关联(需同源)，如果是，使用关联的 <code>Document</code> 编码</li><li>检查 HTML 文档中的 <code>&lt;meta&gt;</code>标签 <ul><li>对于 HTML5 文档，优先识别<code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code></li><li>对于旧版 HTML，识别<code>&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=GBK&quot;&gt;</code></li></ul></li><li>检查资源地址/用户地区设置</li></ol><blockquote><p>BOM 优先级最高，若存在 BOM 则忽略 HTTP 头中的 charset 声明</p></blockquote><hr><h4 id="_1-2-令牌化-tokenization" tabindex="-1">1.2 令牌化（Tokenization） <a class="header-anchor" href="#_1-2-令牌化-tokenization" aria-label="Permalink to &quot;1.2 令牌化（Tokenization）&quot;">​</a></h4><p><strong>目标</strong>：将字符串切割为有意义的语法单元（Tokens）<br><strong>分词规则</strong>：</p><ul><li><code>&lt;div&gt;</code> → <strong>开始标签 Token</strong></li><li><code>&lt;/div&gt;</code> → <strong>结束标签 Token</strong></li><li><code>id=&quot;app&quot;</code> → <strong>属性 Token</strong>（作为开始标签的一部分）</li><li><code>Hello</code> → <strong>文本 Token</strong>，标签之间的文字</li><li><code>&lt;!-- 注释内容 --&gt;</code> → <strong>注释 Token</strong></li></ul><p>这一阶段会处理 HTML 的 &quot;容错性&quot;：对不规范语法（如未闭合标签、错误嵌套）进行自动修正</p><hr><h4 id="_1-3-dom-树构建-tree-construction" tabindex="-1">1.3 DOM 树构建（Tree Construction） <a class="header-anchor" href="#_1-3-dom-树构建-tree-construction" aria-label="Permalink to &quot;1.3 DOM 树构建（Tree Construction）&quot;">​</a></h4><p><strong>目标</strong>：将 Token 序列转换为具有层级关系的 DOM（文档对象模型）树<br><strong>关键机制</strong>：</p><ul><li>使用<a href="https://html.spec.whatwg.org/multipage/parsing.html#the-stack-of-open-elements" target="_blank" rel="noreferrer">开放元素栈</a>维护元素的层级关系</li><li>根据令牌类型创建相应的节点： <ul><li>开始标签令牌创建元素节点</li><li>文本令牌创建文本节点</li><li>注释令牌创建注释节点</li><li>结束标签令牌不创建节点，而是完成元素的构建</li></ul></li><li>每个节点根据 HTML 规范确立父-子-兄弟关系</li></ul><p><strong>HTML 容错处理</strong>：</p><ul><li>自动补全缺失的<code>&lt;html&gt;</code>、<code>&lt;head&gt;</code>、<code>&lt;body&gt;</code>标签</li><li>纠正错误的嵌套顺序（如<code>&lt;p&gt;</code>中嵌套<code>&lt;div&gt;</code>时自动闭合<code>&lt;p&gt;</code>）</li><li>处理未闭合的标签</li></ul><p><strong>脚本处理</strong>：</p><p>当解析器遇到<code>&lt;script&gt;</code>标签时，会暂停 DOM 构建并执行脚本：</p><ol><li>按文档顺序同步阻塞解析（除非标记<code>defer</code>/<code>async</code>）</li><li>脚本仅能访问<strong>已构建</strong>的 DOM 节点</li><li>特殊行为： <ul><li><code>document.write()</code>：在解析中调用时<strong>插入新内容并重启解析</strong></li></ul></li></ol><hr><h4 id="_1-4-文档就绪事件-document-readiness" tabindex="-1">1.4 文档就绪事件（Document Readiness） <a class="header-anchor" href="#_1-4-文档就绪事件-document-readiness" aria-label="Permalink to &quot;1.4 文档就绪事件（Document Readiness）&quot;">​</a></h4><p><strong>事件触发逻辑</strong>：</p>',31)),(l(),r(h,null,{default:i(()=>[n(e,{id:"mermaid-335",class:"mermaid",graph:"flowchart%20TD%0A%20%20%20%20A%5BDOM%E6%A0%91%E6%9E%84%E5%BB%BA%E5%AE%8C%E6%88%90%5D%20--%3E%20B%5B%E6%89%A7%E8%A1%8Cdefer%E8%84%9A%E6%9C%AC%5D%0A%20%20%20%20B%20--%3E%20C%5B%E8%A7%A6%E5%8F%91DOMContentLoaded%5D%0A%20%20%20%20C%20--%3E%20D%5B%E7%AD%89%E5%BE%85%E5%9B%BE%E7%89%87%2FCSS%E5%8A%A0%E8%BD%BD%5D%0A%20%20%20%20D%20--%3E%20E%5B%E8%A7%A6%E5%8F%91load%E4%BA%8B%E4%BB%B6%5D%0A"})]),fallback:i(()=>s[0]||(s[0]=[t(" Loading... ")])),_:1})),s[9]||(s[9]=a('<h4 id="构建过程的核心优化机制" tabindex="-1">构建过程的核心优化机制 <a class="header-anchor" href="#构建过程的核心优化机制" aria-label="Permalink to &quot;构建过程的核心优化机制&quot;">​</a></h4><ul><li><p><strong>增量构建（Incremental Build）</strong></p><ul><li>浏览器采用增量构建策略，在解析过程中<strong>分批生成 DOM 节点</strong>（无固定大小阈值），允许用户提前看到部分内容（如文本先显示）</li></ul></li><li><p><strong>预解析扫描器（Preload Scanner）</strong></p><ul><li>主解析器在解析 HTML 时，会启动一个轻量级的扫描器（独立线程）提前发现并下载 CSS/JS/图片资源</li></ul></li><li><p><strong>回流最小化（Layout Thrashing Avoidance）</strong></p><ul><li>构建过程中如果 JS 读取布局属性（如 offsetHeight），会强制触发同步布局计算（重排），导致性能问题，因此应避免在 DOM 构建过程中读取布局属性</li></ul></li></ul><h3 id="_2-样式计算" tabindex="-1">2. 样式计算 <a class="header-anchor" href="#_2-样式计算" aria-label="Permalink to &quot;2. 样式计算&quot;">​</a></h3><p>样式计算是浏览器渲染管线中的关键步骤，它将 DOM 树和 CSS 规则结合生成带有样式的渲染树。此过程遵循<a href="https://www.w3.org/TR/css-syntax-3/" target="_blank" rel="noreferrer">W3C CSS Syntax Level 3</a>和<a href="https://www.w3.org/TR/css-cascade-4/" target="_blank" rel="noreferrer">CSS Cascading and Inheritance Level 4</a>等规范。</p><h4 id="_2-1-cssom-树构建" tabindex="-1">2.1 CSSOM 树构建 <a class="header-anchor" href="#_2-1-cssom-树构建" aria-label="Permalink to &quot;2.1 CSSOM 树构建&quot;">​</a></h4>',5)),(l(),r(h,null,{default:i(()=>[n(e,{id:"mermaid-386",class:"mermaid",graph:"flowchart%20TD%0A%20%20%20%20A%5B%E5%8E%9F%E5%A7%8BCSS%E6%96%87%E6%9C%AC%5D%20--%3E%20B%5B%E5%AD%97%E8%8A%82%E6%B5%81%E8%A7%A3%E7%A0%81%5D%0A%20%20%20%20B%20--%3E%20C%5B%E4%BB%A4%E7%89%8C%E5%8C%96%5D%0A%20%20%20%20C%20--%3E%20D%5B%E8%A7%A3%E6%9E%90CSS%E8%A7%84%E5%88%99%5D%0A%20%20%20%20D%20--%3E%20E%5B%E6%9E%84%E5%BB%BACSSOM%E6%A0%91%5D%0A"})]),fallback:i(()=>s[1]||(s[1]=[t(" Loading... ")])),_:1})),s[10]||(s[10]=a(`<p><strong>关键步骤</strong>：</p><ol><li><strong>CSS 解析器初始化</strong><ul><li>创建样式表对象（CSSStyleSheet）</li><li>初始化规则列表（CSSRuleList）</li></ul></li><li><strong>规则解析</strong>：<div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="复制代码" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes one-dark-pro one-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">// CSS 规范定义的规则类型（根据CSS Object Model规范）</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">interface</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> CSSRule</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">	const</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> unsigned</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> short</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">      STYLE_RULE</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 1</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">	const</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> unsigned</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> short</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">      CHARSET_RULE</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 2</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">	const</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> unsigned</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> short</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">      IMPORT_RULE</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 3</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">	const</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> unsigned</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> short</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">      MEDIA_RULE</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 4</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">	const</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> unsigned</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> short</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">      FONT_FACE_RULE</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 5</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">	const</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> unsigned</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> short</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">      PAGE_RULE</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 6</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">	const</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> unsigned</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> short</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">      KEYFRAMES_RULE</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 7</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">	const</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> unsigned</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> short</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">      NAMESPACE_RULE</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 10</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li><li><strong>错误处理</strong>： <ul><li>根据 <a href="https://www.w3.org/TR/css-syntax-3/#error-handling" target="_blank" rel="noreferrer">CSS Parsing Level 3 规范</a>，跳过无效规则</li><li>保留有效部分继续解析</li></ul></li></ol><h4 id="_2-2-样式规则匹配" tabindex="-1">2.2 样式规则匹配 <a class="header-anchor" href="#_2-2-样式规则匹配" aria-label="Permalink to &quot;2.2 样式规则匹配&quot;">​</a></h4><p><strong>匹配过程</strong>：</p>`,4)),(l(),r(h,null,{default:i(()=>[n(e,{id:"mermaid-438",class:"mermaid",graph:"flowchart%20LR%0A%20%20%20%20D%5BDOM%E8%8A%82%E7%82%B9%5D%20--%3E%20S%5B%E9%80%89%E6%8B%A9%E5%99%A8%E5%BC%95%E6%93%8E%5D%0A%20%20%20%20S%20--%3E%7C%E9%81%8D%E5%8E%86%7C%20R%5BCSS%E8%A7%84%E5%88%99%5D%0A%20%20%20%20R%20--%3E%20M%5B%E5%8C%B9%E9%85%8D%E7%BB%93%E6%9E%9C%5D%0A%0A"})]),fallback:i(()=>s[2]||(s[2]=[t(" Loading... ")])),_:1})),s[11]||(s[11]=a(`<p><strong>匹配算法</strong>：</p><ol><li><strong>从右向左匹配</strong>： <ul><li>先匹配最具体的选择器部分（如.class 或#id）</li><li>再验证祖先关系（如 div .class）</li></ul></li><li><strong>选择器特异性计算</strong>：</li></ol><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="复制代码" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes one-dark-pro one-light vp-code" tabindex="0"><code><span class="line"><span>特异性值 = (a, b, c, d)</span></span>
<span class="line"><span>a = 来自style属性的规则（存在则为1，否则0）</span></span>
<span class="line"><span>b = ID选择器的规则数量</span></span>
<span class="line"><span>c = 类/属性/伪类选择器的规则数量</span></span>
<span class="line"><span>d = 元素/伪元素选择器的规则数量</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ol start="3"><li><strong>规则匹配优化</strong>： <ul><li>使用 Bloom 过滤器快速排除不匹配规则</li><li>对常见选择器模式建立索引</li></ul></li></ol><h4 id="_2-3-优先级计算-层叠算法" tabindex="-1">2.3 优先级计算（层叠算法） <a class="header-anchor" href="#_2-3-优先级计算-层叠算法" aria-label="Permalink to &quot;2.3 优先级计算（层叠算法）&quot;">​</a></h4><p>样式层叠遵循<a href="https://www.w3.org/TR/css-cascade-4/#cascading" target="_blank" rel="noreferrer">CSS Cascading and Inheritance 规范</a>定义的层叠顺序：</p><ol><li><p><strong>来源优先级（升序）</strong>：</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="复制代码" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes one-dark-pro one-light vp-code" tabindex="0"><code><span class="line"><span>1. 用户代理声明（user agent declarations）</span></span>
<span class="line"><span>2. 用户普通声明（user normal declarations）</span></span>
<span class="line"><span>3. 作者普通声明（author normal declarations）</span></span>
<span class="line"><span>4. 作者重要声明（author important declarations）</span></span>
<span class="line"><span>5. 用户重要声明（user important declarations）</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><blockquote><p>名词解释：用户代理声明，浏览器厂商提供的默认样式（即浏览器内置样式）；用户声明，浏览网站的用户定义的样式（比如通过插件书写的样式）；作者声明，由网站开发者编写的 CSS 样式，包括内联样式、嵌入样式、外部样式。</p></blockquote></li><li><p><strong>特异性比较</strong>：</p><ul><li>比较<code>(a,b,c,d)</code>元组，从左到右比较数值</li><li>例如：<code>(1,0,0,0) &gt; (0,2,3,0)</code></li></ul></li><li><p><strong>出现顺序</strong>：</p><ul><li>特异性相同的规则，后出现的覆盖先出现的</li></ul></li></ol><h4 id="_2-4-继承处理" tabindex="-1">2.4 继承处理 <a class="header-anchor" href="#_2-4-继承处理" aria-label="Permalink to &quot;2.4 继承处理&quot;">​</a></h4><p><strong>继承机制</strong>：</p>`,9)),(l(),r(h,null,{default:i(()=>[n(e,{id:"mermaid-540",class:"mermaid",graph:"flowchart%20TB%0A%20%20%20%20P%5B%E7%88%B6%E5%85%83%E7%B4%A0%5D%20--%3E%7C%E7%BB%A7%E6%89%BF%E5%B1%9E%E6%80%A7%7C%20C%5B%E5%AD%90%E5%85%83%E7%B4%A0%5D%0A%20%20%20%20C%20--%3E%7C%E8%A6%86%E7%9B%96%E5%80%BC%7C%20S%5B%E6%8C%87%E5%AE%9A%E5%80%BC%5D%0A"})]),fallback:i(()=>s[3]||(s[3]=[t(" Loading... ")])),_:1})),s[12]||(s[12]=a(`<p><strong>关键规则</strong>：</p><ol><li><p><strong>可继承属性</strong></p><ul><li>字体相关：font-family, font-size</li><li>文本相关：color, line-height</li><li>可见性：visibility</li><li>列表属性：list-style</li></ul></li><li><p><strong>继承值计算</strong>：</p><p>根据 <a href="https://www.w3.org/TR/css-cascade-4/#inheriting" target="_blank" rel="noreferrer">CSS Cascading and Inheritance 规范</a>：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="复制代码" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes one-dark-pro one-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">if</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (</span><span style="--shiki-dark:#E5C07B;--shiki-light:#383A42;">property</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">isInherited</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) {</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">	computedValue</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#E5C07B;--shiki-light:#383A42;"> parent</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">computedValue</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">} </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">else</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">	computedValue</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> initialValue</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p><strong>特殊关键字</strong>：</p><ul><li>inherit：强制继承父元素值</li><li>initial：使用规范初始值</li><li>unset：自动选择 inherit 或 initial</li><li>revert：回滚到用户代理样式</li></ul></li></ol><h4 id="_2-5-默认值应用" tabindex="-1">2.5 默认值应用 <a class="header-anchor" href="#_2-5-默认值应用" aria-label="Permalink to &quot;2.5 默认值应用&quot;">​</a></h4><ol><li><p><strong>未定义属性处理</strong>：</p><ul><li>使用属性规范定义的初始值</li><li>例如：display 初始值为 inline</li></ul></li><li><p><strong>CSS 全局关键字</strong>：</p><table tabindex="0"><thead><tr><th>关键字</th><th>行为</th></tr></thead><tbody><tr><td>initial</td><td>将属性重置为 CSS 规范定义的初始值</td></tr><tr><td>inherit</td><td>继承父元素的值</td></tr><tr><td>unset</td><td>继承属性使用 inherit，非继承属性使用 initial</td></tr><tr><td>revert</td><td>回滚到用户代理样式</td></tr></tbody></table></li><li><p><strong>UA 样式表应用</strong>：</p><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="复制代码" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes one-dark-pro one-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">/* 浏览器默认样式示例 */</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">html</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">	display: </span><span style="--shiki-dark:#D19A66;--shiki-light:#383A42;">block</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">; </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">/* 根元素初始值为block */</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">head</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">	display: </span><span style="--shiki-dark:#D19A66;--shiki-light:#383A42;">none</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li></ol><h4 id="_2-6-相对值转换" tabindex="-1">2.6 相对值转换 <a class="header-anchor" href="#_2-6-相对值转换" aria-label="Permalink to &quot;2.6 相对值转换&quot;">​</a></h4><table tabindex="0"><thead><tr><th>相对单位</th><th>转换依据</th><th>示例</th></tr></thead><tbody><tr><td>em, rem</td><td>字体大小</td><td>1em = 父元素 font-size</td></tr><tr><td>%</td><td>包含块尺寸</td><td>width: 50%</td></tr><tr><td>vw, vh</td><td>视口尺寸</td><td>1vw = 1%视口宽度</td></tr><tr><td>ch, ex</td><td>字符尺寸</td><td>基于当前字体</td></tr><tr><td>calc()</td><td>数学表达式计算</td><td>calc(100% - 20px)</td></tr></tbody></table><p><strong>计算过程</strong>：</p><ol><li>递归解析表达式</li><li>单位统一转换</li><li>最终值计算</li></ol><h4 id="_2-7-样式属性标准化" tabindex="-1">2.7 样式属性标准化 <a class="header-anchor" href="#_2-7-样式属性标准化" aria-label="Permalink to &quot;2.7 样式属性标准化&quot;">​</a></h4><p><strong>标准化操作</strong>：</p><ol><li><p><strong>简写属性展开</strong>：</p><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="复制代码" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes one-dark-pro one-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">/* 输入 */</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">margin: 10px;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">/* 展开为 */</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">margin-top</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">: 10px;</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">margin-right</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">: 10px;</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">margin-bottom</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">: 10px;</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">margin-left</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">: 10px;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li><li><p><strong>关键字转换</strong>：</p><ul><li>auto → 具体计算值</li><li>currentColor → 解析为当前 color 值</li></ul></li><li><p><strong>规范化值</strong>：</p><ul><li>颜色：#RGB → #RRGGBB</li><li>长度：0px → 0</li><li>角度：360deg → 0deg</li></ul></li></ol><h4 id="_2-8-媒体查询应用" tabindex="-1">2.8 媒体查询应用 <a class="header-anchor" href="#_2-8-媒体查询应用" aria-label="Permalink to &quot;2.8 媒体查询应用&quot;">​</a></h4>`,12)),(l(),r(h,null,{default:i(()=>[n(e,{id:"mermaid-839",class:"mermaid",graph:"flowchart%20LR%0A%20%20%20%20M%5B%E5%AA%92%E4%BD%93%E8%A7%84%E5%88%99%5D%20--%3E%20C%5B%E6%9D%A1%E4%BB%B6%E6%A3%80%E6%B5%8B%5D%0A%20%20%20%20C%20--%3E%7C%E5%8C%B9%E9%85%8D%7C%20A%5B%E5%BA%94%E7%94%A8%E8%A7%84%E5%88%99%5D%0A%20%20%20%20C%20--%3E%7C%E4%B8%8D%E5%8C%B9%E9%85%8D%7C%20I%5B%E5%BF%BD%E7%95%A5%E8%A7%84%E5%88%99%5D%0A"})]),fallback:i(()=>s[4]||(s[4]=[t(" Loading... ")])),_:1})),s[13]||(s[13]=a(`<p><strong>检测维度</strong>：</p><ol><li>设备类型：screen, print, speech</li><li>视口尺寸：width, height</li><li>显示特性：resolution, orientation</li><li>用户偏好：prefers-color-scheme</li></ol><h4 id="_2-9-伪元素-类处理" tabindex="-1">2.9 伪元素/类处理 <a class="header-anchor" href="#_2-9-伪元素-类处理" aria-label="Permalink to &quot;2.9 伪元素/类处理&quot;">​</a></h4><ol><li><p><strong>伪类匹配</strong>：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="复制代码" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes one-dark-pro one-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">for</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">element</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;"> of</span><span style="--shiki-dark:#E5C07B;--shiki-light:#986801;"> DOM</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) {</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">	if</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (</span><span style="--shiki-dark:#E5C07B;--shiki-light:#383A42;">element</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">matches</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#50A14F;">&#39;:hover&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">)) {</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#4078F2;">		applyHoverStyles</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">()</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">	}</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p><strong>伪元素处理</strong>：</p><ul><li>伪元素（如::before, ::after）不是真实 DOM 节点，而是在渲染时生成的虚拟节点</li><li>应用对应样式规则并在渲染树中创建相应渲染对象</li></ul></li></ol><h4 id="_2-10-计算样式树构建" tabindex="-1">2.10 计算样式树构建 <a class="header-anchor" href="#_2-10-计算样式树构建" aria-label="Permalink to &quot;2.10 计算样式树构建&quot;">​</a></h4>`,5)),(l(),r(h,null,{default:i(()=>[n(e,{id:"mermaid-896",class:"mermaid",graph:"flowchart%20LR%0A%20%20%20%20D%5BDOM%E6%A0%91%5D%20--%3E%20S%5B%E6%A0%B7%E5%BC%8F%E8%AE%A1%E7%AE%97%5D%0A%20%20%20%20S%20--%3E%20C%5B%E8%AE%A1%E7%AE%97%E6%A0%B7%E5%BC%8F%E6%A0%91%5D%0A%20%20%20%20C%20--%3E%20R%5B%E6%B8%B2%E6%9F%93%E6%A0%91%5D%0A"})]),fallback:i(()=>s[5]||(s[5]=[t(" Loading... ")])),_:1})),s[14]||(s[14]=p("p",null,[p("strong",null,"优化机制"),t("：")],-1)),s[15]||(s[15]=p("ol",null,[p("li",null,"增量更新（仅修改受影响节点）"),p("li",null,"样式共享（相同样式节点复用）"),p("li",null,"缓存计算结果")],-1))])}const _=k(g,[["render",A]]);export{y as __pageData,_ as default};
