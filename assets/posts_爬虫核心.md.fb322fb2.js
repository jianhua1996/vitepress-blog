import{_ as t,o as e,c as o,Q as p}from"./chunks/framework.061bee3a.js";const g=JSON.parse('{"title":"爬虫核心","description":"","frontmatter":{"title":"爬虫核心","tags":["爬虫","python爬虫"]},"headers":[],"relativePath":"posts/爬虫核心.md","filePath":"posts/爬虫核心.md"}'),a={name:"posts/爬虫核心.md"},s=p('<h1 id="爬虫核心" tabindex="-1">爬虫核心 <a class="header-anchor" href="#爬虫核心" aria-label="Permalink to &quot;爬虫核心&quot;">​</a></h1><h3 id="_1-http-协议" tabindex="-1">1. HTTP 协议 <a class="header-anchor" href="#_1-http-协议" aria-label="Permalink to &quot;1. HTTP 协议&quot;">​</a></h3><blockquote><p>爬虫就是模拟浏览器去服务器获取数据过程的程序</p></blockquote><ul><li><p><strong>请求首行</strong></p><p><em>(POST /api/v1/auth/password/login?password=123 HTTP/1.1)</em></p><p><u>请求方法+请求路径+query 参数+http 协议版本</u></p></li><li><p><strong>请求头</strong></p><p><em>（Content-Type: application/json\\r\\nUser-Agent: xxx...）</em></p></li><li><p><strong>请求体</strong></p><p><em>(空行之后的数据)</em></p></li><li><p><strong>响应首行</strong></p><p><em>(HTTP1.1 200 ok)</em></p><p><u>http 协议版本+响应状态码+状态信息</u></p></li><li><p><strong>响应头</strong></p><p><em>（同请求头）</em></p></li><li><p><strong>响应体</strong></p><p><em>(空行之后的数据)</em></p></li></ul><h3 id="_2-反反爬策略" tabindex="-1">2. 反反爬策略 <a class="header-anchor" href="#_2-反反爬策略" aria-label="Permalink to &quot;2. 反反爬策略&quot;">​</a></h3><blockquote><p>常见的反爬策略是通过区分请求头来鉴别爬虫程序和浏览器正常访问的</p></blockquote><ul><li><p><strong>补 User-Agent</strong></p></li><li><p><strong>补 Referer</strong></p><p><em>(防盗链通常校验这个值)</em></p></li><li><p><strong>补 Cookie</strong></p><p><em>(需要登陆的网站通常需要校验 Cookie)</em></p></li><li><p><strong>补加密参数</strong></p><p><em>(一些网站会把请求参数做某种加密，在服务端进行解密验证，我们需要逆向出对应的加密方式，并进行模拟)</em></p></li></ul><h3 id="_3-常见加密方式" tabindex="-1">3. 常见加密方式 <a class="header-anchor" href="#_3-常见加密方式" aria-label="Permalink to &quot;3. 常见加密方式&quot;">​</a></h3><blockquote><p>常见的加密方式有 base64 转码、md5 摘要、aes 对称加密等</p></blockquote><ul><li><p><strong>base64 转码</strong></p><p><em>base64 包括的字符有大写字母 A-Z、小写字母 a-z、数字 0-9、符号 &quot;+&quot;、&quot;/&quot;（再加上作为垫字的 &quot;=&quot;，实际上是 65 个字符)</em></p></li><li><p><strong>md5 摘要</strong></p><p><em>md5 全称 Message Digest Algorithmn，是一种被广泛使用的密码散列函数，可以产生出一个 128 bit 的散列值（hash value），用于确保信息传输完整一致。md5 常见的分为取 16 位和取 32 位两种格式</em></p></li><li><p><strong>aes 对称加密</strong></p></li></ul>',10),r=[s];function l(n,i,m,u,_,h){return e(),o("div",null,r)}const d=t(a,[["render",l]]);export{g as __pageData,d as default};
