import{_ as k,C as h,c as E,o as l,a4 as d,G as n,j as a,b as r,a as i,w as t,a5 as p}from"./chunks/framework.BicIBzvP.js";const _=JSON.parse('{"title":"浏览器渲染原理（一）","description":"","frontmatter":{"title":"浏览器渲染原理（一）","tags":["浏览器","渲染原理","reflow","repaint","关键渲染路径"],"date":"2025-6-29","next":{"text":"浏览器渲染原理（二）","link":"/posts/浏览器渲染原理（二）.md"}},"headers":[],"relativePath":"posts/浏览器渲染原理（一）.md","filePath":"posts/浏览器渲染原理（一）.md","lastUpdated":1756559909000}'),g={name:"posts/浏览器渲染原理（一）.md"};function c(A,s,u,B,b,m){const o=h("ImageBuilder"),e=h("Mermaid");return l(),E("div",null,[s[9]||(s[9]=d('<h2 id="浏览器的多进程架构" tabindex="-1">浏览器的多进程架构 <a class="header-anchor" href="#浏览器的多进程架构" aria-label="Permalink to &quot;浏览器的多进程架构&quot;">​</a></h2><h3 id="进程与线程" tabindex="-1">进程与线程 <a class="header-anchor" href="#进程与线程" aria-label="Permalink to &quot;进程与线程&quot;">​</a></h3><p><strong>进程</strong>： 指计算机中已执行的程序，曾经是分时系统的基本运作单位。在面向进程设计的系统中，是程序的基本执行实体；在面向线程设计的系统中，进程本身不是基本执行单位，而是线程的容器。<br><strong>线程</strong>： 进程内的执行单元，是 CPU 调度的基本单位。</p><p>参考：<a href="https://zh.wikipedia.org/zh-cn/%E8%A1%8C%E7%A8%8B" target="_blank" rel="noreferrer">进程</a>、<a href="https://zh.wikipedia.org/zh-cn/%E7%BA%BF%E7%A8%8B" target="_blank" rel="noreferrer">线程</a></p><h3 id="现代浏览器的进程架构" tabindex="-1">现代浏览器的进程架构 <a class="header-anchor" href="#现代浏览器的进程架构" aria-label="Permalink to &quot;现代浏览器的进程架构&quot;">​</a></h3><p>Chrome 为代表的现代浏览器采用多进程架构，主要进程类型包括：</p><table tabindex="0"><thead><tr><th>进程类型</th><th>职责</th></tr></thead><tbody><tr><td>浏览器主进程</td><td>管理界面、存储、下载等核心功能</td></tr><tr><td>GPU 进程</td><td>处理图形渲染任务</td></tr><tr><td>网络进程</td><td>管理网络请求和响应</td></tr><tr><td>存储进程</td><td>处理缓存和存储操作</td></tr><tr><td><strong>渲染进程</strong></td><td><strong>核心：将 HTML/CSS/JS 转换为可交互页面</strong></td></tr><tr><td>插件进程</td><td>管理第三方插件</td></tr></tbody></table><p>下面是浏览器的实际进程截图：</p>',8)),n(o,{source:["浏览器进程架构.png"],size:"medium"}),s[10]||(s[10]=a("p",null,[i("其中，"),a("strong",null,"渲染进程"),i("是我们最应该关注的进程，它负责通过一系列渲染步骤（又称作浏览器渲染管线）将 HTML、JavaScript、CSS、图片等资源最终解析为可以显示和交互的页面。")],-1)),s[11]||(s[11]=a("p",null,[a("strong",null,"渲染进程管理规则"),i("：")],-1)),(l(),r(p,null,{default:t(()=>[n(e,{id:"mermaid-91",class:"mermaid",graph:"%20%20flowchart%20TD%0A%20%20A%5B%E6%96%B0%E9%A1%B5%E9%9D%A2%E8%AF%B7%E6%B1%82%5D%20--%3E%20B%7B%E4%B8%8E%E5%BD%93%E5%89%8D%E9%A1%B5%E9%9D%A2%E6%98%AF%E5%90%A6%E5%90%8C%E7%AB%99%EF%BC%9F%7D%0A%20%20B%20--%3E%7C%E6%98%AF%7C%20C%5B%E5%A4%8D%E7%94%A8%E5%BD%93%E5%89%8D%E6%B8%B2%E6%9F%93%E8%BF%9B%E7%A8%8B%5D%0A%20%20B%20--%3E%7C%E5%90%A6%7C%20D%5B%E5%88%9B%E5%BB%BA%E6%96%B0%E6%B8%B2%E6%9F%93%E8%BF%9B%E7%A8%8B%5D%0A"})]),fallback:t(()=>s[0]||(s[0]=[i(" Loading... ")])),_:1})),s[12]||(s[12]=d("<ul><li>同站判定：相同的 eTLD+1（有效顶级域名+二级域名）</li><li>示例： <ul><li>✅ <code>www.baidu.com</code>与<code>tieba.baidu.com</code> → 同站</li><li>❌ <code>www.baidu.com</code>与<code>www.taobao.com</code> → 不同站</li></ul></li></ul><p>如下图所示：</p>",2)),n(o,{source:["浏览器进程架构-同站进程复用1.png","浏览器进程架构-同站进程复用2.png","浏览器进程架构-同站进程复用3.png"],size:"medium"}),s[13]||(s[13]=a("blockquote",null,[a("p",null,[i("判断 eTLD+1 的方法依赖于公共后缀列表（Public Suffix List），参考"),a("a",{href:"https://publicsuffix.org/list/",target:"_blank",rel:"noreferrer"},"公共后缀列表")]),a("p",null,[i("多进程架构的优势：崩溃隔离，沙箱化等，参考"),a("a",{href:"https://developer.chrome.com/blog/inside-browser-part1?hl=zh-cn#the_benefit_of_multi-process_architecture_in_chrome",target:"_blank",rel:"noreferrer"},"Chrome 中多进程架构的好处")])],-1)),s[14]||(s[14]=a("hr",null,null,-1)),s[15]||(s[15]=a("h2",{id:"浏览器渲染管线",tabindex:"-1"},[i("浏览器渲染管线 "),a("a",{class:"header-anchor",href:"#浏览器渲染管线","aria-label":'Permalink to "浏览器渲染管线"'},"​")],-1)),s[16]||(s[16]=a("p",null,"我们把从输入数据（通常是 HTML、CSS、JavaScript）到显示结果（屏幕上看到的画面）这整个过程称为浏览器的渲染流程，或者叫渲染管线。",-1)),s[17]||(s[17]=a("p",null,"完整的渲染管线流程：",-1)),(l(),r(p,null,{default:t(()=>[n(e,{id:"mermaid-139",class:"mermaid",graph:"%20%20flowchart%20LR%0A%20%20A%5BHTML%E8%A7%A3%E6%9E%90%5D%20--%3E%20B%5B%E6%A0%B7%E5%BC%8F%E8%AE%A1%E7%AE%97%5D%0A%20%20B%20--%3E%20C%5B%E5%B8%83%E5%B1%80%5D%0A%20%20C%20--%3E%20D%5B%E5%88%86%E5%B1%82%5D%0A%20%20D%20--%3E%20E%5B%E7%BB%98%E5%88%B6%5D%0A%20%20E%20--%3E%20F%5B%E5%88%86%E5%9D%97%5D%0A%20%20F%20--%3E%20G%5B%E5%85%89%E6%A0%85%E5%8C%96%5D%0A%20%20G%20--%3E%20H%5B%E5%90%88%E6%88%90%5D%0A"})]),fallback:t(()=>s[1]||(s[1]=[i(" Loading... ")])),_:1})),s[18]||(s[18]=d('<p>这个过程也被称为<a href="https://developer.mozilla.org/en-US/docs/Web/Performance/Critical_rendering_path" target="_blank" rel="noreferrer">关键渲染路径(Critical Rendering Path)</a>。</p><hr><h3 id="_1-html-解析与-dom-树构建" tabindex="-1">1. HTML 解析与 DOM 树构建 <a class="header-anchor" href="#_1-html-解析与-dom-树构建" aria-label="Permalink to &quot;1. HTML 解析与 DOM 树构建&quot;">​</a></h3><p>HTML 解析是浏览器渲染管线的第一步，它将 HTML 文档转换为 DOM 树。这个过程遵循<a href="https://html.spec.whatwg.org/multipage/parsing.html#parsing" target="_blank" rel="noreferrer">WHATWG HTML 标准</a>中定义的算法。</p><h4 id="_1-1-字节流解码-byte-decoding" tabindex="-1">1.1. 字节流解码（Byte Decoding） <a class="header-anchor" href="#_1-1-字节流解码-byte-decoding" aria-label="Permalink to &quot;1.1. 字节流解码（Byte Decoding）&quot;">​</a></h4><p><strong>目标</strong>：将原始字节流转换为可读字符</p><p><strong>编码识别优先级</strong>：</p><ol><li>🥇<a href="https://encoding.spec.whatwg.org/#bom-sniff" target="_blank" rel="noreferrer">BOM 嗅探</a> （BOM sniffing）最高优先级</li><li>🥈HTTP 头中的<code>Content-Type</code>（如<code>Content-Type: text/html; charset=UTF-8</code>）</li><li>🥉HTML 文档中的 <code>&lt;meta&gt;</code>声明 <ul><li>对于 HTML5 文档，优先识别<code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code></li><li>对于旧版 HTML，识别<code>&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=GBK&quot;&gt;</code></li></ul></li><li>文档关联/资源路径推测 <blockquote><p><strong>特殊情况</strong>：同时存在 BOM 和 HTTP charset 声明时，<strong>BOM 优先级更高</strong></p></blockquote></li></ol><h4 id="_1-2-令牌化-tokenization" tabindex="-1">1.2. 令牌化（Tokenization） <a class="header-anchor" href="#_1-2-令牌化-tokenization" aria-label="Permalink to &quot;1.2. 令牌化（Tokenization）&quot;">​</a></h4><p><strong>目标</strong>：将字符串切割为有意义的语法单元（Tokens）</p><p><strong>分词规则</strong>：</p><table tabindex="0"><thead><tr><th>输入</th><th>输出 Token 类型</th><th>示例</th></tr></thead><tbody><tr><td><code>&lt;div&gt;</code></td><td>开始标签</td><td><code>StartTag: div</code></td></tr><tr><td><code>&lt;/div&gt;</code></td><td>结束标签</td><td><code>EndTag: div</code></td></tr><tr><td><code>class=&quot;title&quot;</code></td><td>标签属性</td><td>作为开始标签的一部分</td></tr><tr><td><code>Hello World</code></td><td>文本</td><td><code>Text: &quot;Hello World&quot;</code></td></tr><tr><td><code>&lt;!-- comment --&gt;</code></td><td>注释</td><td><code>Comment: &quot;comment&quot;</code></td></tr></tbody></table><p><strong>容错机制</strong>：自动修正错误语法（如未闭合标签、错误嵌套）</p><h4 id="_1-3-dom-树构建-tree-construction" tabindex="-1">1.3. DOM 树构建（Tree Construction） <a class="header-anchor" href="#_1-3-dom-树构建-tree-construction" aria-label="Permalink to &quot;1.3. DOM 树构建（Tree Construction）&quot;">​</a></h4><p><strong>目标</strong>：将 Token 序列转换为具有层级关系的 DOM（文档对象模型）树</p><p><strong>核心过程</strong>：</p>',16)),(l(),r(p,null,{default:t(()=>[n(e,{id:"mermaid-291",class:"mermaid",graph:"%20%20flowchart%20TB%0A%20%20T%5BToken%E5%BA%8F%E5%88%97%5D%20--%3E%20P%5B%E5%BC%80%E6%94%BE%E5%85%83%E7%B4%A0%E6%A0%88%5D%0A%20%20P%20--%3E%20N%5B%E5%88%9B%E5%BB%BA%E8%8A%82%E7%82%B9%5D%0A%20%20N%20--%3E%20R%5B%E5%BB%BA%E7%AB%8B%E7%88%B6%E5%AD%90%E5%85%B3%E7%B3%BB%5D%0A%20%20R%20--%3E%20D%5B%E5%AE%8C%E6%88%90DOM%E6%A0%91%5D%0A"})]),fallback:t(()=>s[2]||(s[2]=[i(" Loading... ")])),_:1})),s[19]||(s[19]=d('<p><strong>关键技术细节</strong>：</p><ul><li>使用<a href="https://html.spec.whatwg.org/multipage/parsing.html#the-stack-of-open-elements" target="_blank" rel="noreferrer">开放元素栈</a>维护元素的层级关系</li><li><strong>脚本处理规则</strong>： <ul><li>遇到<code>&lt;script&gt;</code>时暂停 DOM 构建并执行脚本，如果脚本需要下载，则需要等待脚本下载并执行完成。（除非标记<code>async</code>/<code>defer</code>） <blockquote><p>async/defer 的区别，参考： <a href="https://zh.javascript.info/script-async-defer#zong-jie" target="_blank" rel="noreferrer">脚本：async，defer</a></p></blockquote></li><li>特殊行为：调用<code>document.write()</code>会插入内容到当前位置并重启解析</li></ul></li><li><strong>自动补全和纠错</strong>： <ul><li>自动补全缺失的<code>&lt;html&gt;</code>/<code>&lt;head&gt;</code>/<code>&lt;body&gt;</code></li><li>纠正错误的嵌套顺序（如<code>&lt;p&gt;</code>内嵌<code>&lt;div&gt;</code>）</li><li>处理未闭合的标签</li></ul></li></ul><h4 id="_1-4-触发文档就绪事件-document-readiness" tabindex="-1">1.4. 触发文档就绪事件（Document Readiness） <a class="header-anchor" href="#_1-4-触发文档就绪事件-document-readiness" aria-label="Permalink to &quot;1.4. 触发文档就绪事件（Document Readiness）&quot;">​</a></h4>',3)),(l(),r(p,null,{default:t(()=>[n(e,{id:"mermaid-349",class:"mermaid",graph:"%20%20flowchart%20LR%0A%20%20DOM%E5%AE%8C%E6%88%90%20--%3E%20%E6%89%A7%E8%A1%8Cdefer%E8%84%9A%E6%9C%AC%20--%3E%20DOMContentLoaded%0A%20%20DOMContentLoaded%20--%3E%20%E7%AD%89%E5%BE%85%E6%89%80%E6%9C%89%E5%A4%96%E9%83%A8%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD%E5%AE%8C%E6%88%90%20--%3E%20load%0A"})]),fallback:t(()=>s[3]||(s[3]=[i(" Loading... ")])),_:1})),s[20]||(s[20]=d('<h4 id="构建过程的核心优化机制" tabindex="-1">构建过程的核心优化机制 <a class="header-anchor" href="#构建过程的核心优化机制" aria-label="Permalink to &quot;构建过程的核心优化机制&quot;">​</a></h4><ul><li><p><strong>增量构建（Incremental Build）</strong></p><ul><li>浏览器采用增量构建策略，在解析过程中<strong>分批生成 DOM 节点</strong>（无固定大小阈值），允许用户提前看到部分内容（如文本先显示）</li></ul></li><li><p><strong>预解析扫描器（Preload Scanner）</strong></p><ul><li>主解析器在解析 HTML 文档时，会启动一个轻量级的扫描器（独立线程）提前发现并下载 CSS/JS/图片资源 <blockquote><p>关于预解析扫描器是否是一个独立的线程，存在争议。但可以肯定的是，预解析扫描器与主解析器之间是并行的。参考<a href="https://html.whatwg.com.cn/multipage/parsing.html#active-speculative-html-parser" target="_blank" rel="noreferrer">HTML 标准</a>。</p></blockquote></li></ul></li></ul><h3 id="_2-样式计算" tabindex="-1">2. 样式计算 <a class="header-anchor" href="#_2-样式计算" aria-label="Permalink to &quot;2. 样式计算&quot;">​</a></h3><p>样式计算是浏览器渲染管线中的关键步骤，它将 DOM 树和 CSS 规则结合生成带有样式的渲染树。此过程遵循<a href="https://www.w3.org/TR/css-syntax-3/" target="_blank" rel="noreferrer">W3C CSS Syntax Level 3</a>和<a href="https://www.w3.org/TR/css-cascade-4/" target="_blank" rel="noreferrer">CSS Cascading and Inheritance Level 4</a>等规范。</p><h4 id="_2-1-cssom-树构建" tabindex="-1">2.1. CSSOM 树构建 <a class="header-anchor" href="#_2-1-cssom-树构建" aria-label="Permalink to &quot;2.1. CSSOM 树构建&quot;">​</a></h4>',5)),(l(),r(p,null,{default:t(()=>[n(e,{id:"mermaid-393",class:"mermaid",graph:"%20%20flowchart%20LR%0A%20%20CSS%E6%96%87%E6%9C%AC%20--%3E%20%E5%AD%97%E8%8A%82%E8%A7%A3%E7%A0%81%20--%3E%20%E4%BB%A4%E7%89%8C%E5%8C%96%20--%3E%20%E8%A7%84%E5%88%99%E8%A7%A3%E6%9E%90%20--%3E%20CSSOM%E6%A0%91%0A"})]),fallback:t(()=>s[4]||(s[4]=[i(" Loading... ")])),_:1})),s[21]||(s[21]=d(`<p><strong>关键步骤</strong>：</p><ol><li><p><strong>CSS 解析器初始化</strong></p><ul><li>创建样式表对象（CSSStyleSheet）</li><li>初始化规则列表（CSSRuleList）</li></ul></li><li><p><strong>规则解析</strong>：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="复制代码" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes one-dark-pro one-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">// CSS 规范定义的规则类型（根据CSS Object Model规范）</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">interface</span><span style="--shiki-dark:#E5C07B;--shiki-light:#C18401;"> CSSRule</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">	const</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> unsigned</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> short</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">      STYLE_RULE</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 1</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">	const</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> unsigned</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> short</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">      CHARSET_RULE</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 2</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">	const</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> unsigned</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> short</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">      IMPORT_RULE</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 3</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">	const</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> unsigned</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> short</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">      MEDIA_RULE</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 4</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">	const</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> unsigned</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> short</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">      FONT_FACE_RULE</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 5</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">	const</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> unsigned</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> short</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">      PAGE_RULE</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 6</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">	const</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> unsigned</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> short</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">      KEYFRAMES_RULE</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 7</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">	const</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> unsigned</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> short</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">      NAMESPACE_RULE</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#D19A66;--shiki-light:#986801;"> 10</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li><li><p><strong>错误处理</strong>：</p><ul><li>根据 <a href="https://www.w3.org/TR/css-syntax-3/#error-handling" target="_blank" rel="noreferrer">CSS Parsing Level 3 规范</a>，跳过无效规则</li><li>保留有效部分继续解析</li></ul></li></ol><h4 id="_2-2-规则匹配" tabindex="-1">2.2. 规则匹配 <a class="header-anchor" href="#_2-2-规则匹配" aria-label="Permalink to &quot;2.2. 规则匹配&quot;">​</a></h4><p><strong>匹配过程</strong>：</p>`,4)),(l(),r(p,null,{default:t(()=>[n(e,{id:"mermaid-445",class:"mermaid",graph:"%20%20flowchart%20LR%0A%20%20D%5BDOM%E8%8A%82%E7%82%B9%5D%20--%3E%20S%5B%E9%80%89%E6%8B%A9%E5%99%A8%E5%BC%95%E6%93%8E%5D%0A%20%20S%20--%3E%7C%E4%BB%8E%E5%8F%B3%E5%90%91%E5%B7%A6%7C%20R%5B.container%20%3E%20ul%20%3E%20li.item%5D%0A%20%20R%20--%3E%7C%E5%85%88%E5%8C%B9%E9%85%8Dli.item%7C%20M%5B%E5%8C%B9%E9%85%8D%E7%BB%93%E6%9E%9C%5D%0A"})]),fallback:t(()=>s[5]||(s[5]=[i(" Loading... ")])),_:1})),s[22]||(s[22]=d(`<p><strong>匹配算法</strong>：</p><ol><li><p><strong>从右向左匹配</strong>：</p><ul><li>先匹配最具体的选择器部分（如.class 或#id）</li><li>再验证祖先关系（如 div .class）</li></ul></li><li><p><strong>选择器特异性计算</strong>：</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="复制代码" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes one-dark-pro one-light vp-code" tabindex="0"><code><span class="line"><span>特异性值 = (a, b, c, d)</span></span>
<span class="line"><span>a = 来自style属性的规则（存在则为1，否则0）</span></span>
<span class="line"><span>b = ID选择器的规则数量</span></span>
<span class="line"><span>c = 类/属性/伪类选择器的规则数量</span></span>
<span class="line"><span>d = 元素/伪元素选择器的规则数量</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p><strong>规则匹配优化</strong>：</p><ul><li>对常见选择器模式建立索引（如类选择器 → 元素列表映射）</li><li>采用分层过滤（先匹配具体选择器，再验证祖先关系）</li><li>编译选择器为字节码提升执行效率</li></ul></li></ol><h4 id="_2-3-层叠顺序计算" tabindex="-1">2.3. 层叠顺序计算 <a class="header-anchor" href="#_2-3-层叠顺序计算" aria-label="Permalink to &quot;2.3. 层叠顺序计算&quot;">​</a></h4><p>样式层叠遵循<a href="https://www.w3.org/TR/css-cascade-4/#cascading" target="_blank" rel="noreferrer">CSS Cascading and Inheritance 规范</a>定义的层叠顺序：</p><ol><li><p><strong>来源优先级（升序）</strong>：</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="复制代码" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes one-dark-pro one-light vp-code" tabindex="0"><code><span class="line"><span>用户代理声明（user agent declarations）</span></span>
<span class="line"><span>用户普通声明（user normal declarations）</span></span>
<span class="line"><span>作者普通声明（author normal declarations）</span></span>
<span class="line"><span>作者重要声明（author important declarations）</span></span>
<span class="line"><span>用户重要声明（user important declarations）</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><blockquote><p>名词解释：用户代理声明，浏览器厂商提供的默认样式（即浏览器内置样式）；用户声明，浏览网站的用户定义的样式（比如通过插件书写的样式）；作者声明，由网站开发者编写的 CSS 样式，包括内联样式、嵌入样式、外部样式。</p></blockquote></li><li><p><strong>特异性比较</strong>：</p><ul><li>比较<code>(a,b,c,d)</code>元组，从左到右比较数值</li><li>例如：<code>(1,0,0,0) &gt; (0,2,3,0)</code></li></ul></li><li><p><strong>出现顺序</strong>：</p><ul><li>特异性相同的规则，后出现的覆盖先出现的</li></ul></li></ol><h4 id="_2-4-继承属性处理" tabindex="-1">2.4. 继承属性处理 <a class="header-anchor" href="#_2-4-继承属性处理" aria-label="Permalink to &quot;2.4. 继承属性处理&quot;">​</a></h4><p><strong>继承机制</strong>：</p>`,7)),(l(),r(p,null,{default:t(()=>[n(e,{id:"mermaid-550",class:"mermaid",graph:"%20%20flowchart%20TD%0A%20%20%E7%88%B6%E5%85%83%E7%B4%A0%20--%E5%8F%AF%E7%BB%A7%E6%89%BF%E5%B1%9E%E6%80%A7--%3E%20%E5%AD%90%E5%85%83%E7%B4%A0%0A%20%20%E5%AD%90%E5%85%83%E7%B4%A0%20--%E6%98%BE%E5%BC%8F%E8%AE%BE%E7%BD%AE--%3E%20%E8%A6%86%E7%9B%96%E5%80%BC%0A"})]),fallback:t(()=>s[6]||(s[6]=[i(" Loading... ")])),_:1})),s[23]||(s[23]=d(`<p><strong>关键规则</strong>：</p><ol><li><p><strong>继承值计算</strong>：</p><p>根据 <a href="https://www.w3.org/TR/css-cascade-4/#inheriting" target="_blank" rel="noreferrer">CSS Cascading and Inheritance 规范</a>：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="复制代码" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes one-dark-pro one-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">// 如果属性是可继承属性，则使用父元素值，否则使用初始值</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">if</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> (</span><span style="--shiki-dark:#E5C07B;--shiki-light:#383A42;">property</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">isInherited</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">) {</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">	computedValue</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#E5C07B;--shiki-light:#383A42;"> parent</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">.</span><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">computedValue</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">} </span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">else</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;"> {</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;">	computedValue</span><span style="--shiki-dark:#56B6C2;--shiki-light:#0184BC;"> =</span><span style="--shiki-dark:#E06C75;--shiki-light:#383A42;"> initialValue</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li><p><strong>特殊关键字</strong>：</p><table tabindex="0"><thead><tr><th>关键字</th><th>行为</th></tr></thead><tbody><tr><td><code>inherit</code></td><td>强制继承父元素值</td></tr><tr><td><code>initial</code></td><td>使用规范初始值</td></tr><tr><td><code>unset</code></td><td>自动继承或初始值</td></tr><tr><td><code>revert</code></td><td>回滚到 UA 样式</td></tr></tbody></table></li></ol><h4 id="_2-5-相对值转换" tabindex="-1">2.5. 相对值转换 <a class="header-anchor" href="#_2-5-相对值转换" aria-label="Permalink to &quot;2.5. 相对值转换&quot;">​</a></h4><table tabindex="0"><thead><tr><th>相对单位</th><th>转换依据</th><th>示例</th></tr></thead><tbody><tr><td>em</td><td>- 用于普通属性时，相对于本元素的字体大小 <br> - 用于 <code>font-size</code> 时相对于父元素的字体大小</td><td></td></tr><tr><td>rem</td><td>根元素 <code>font-size</code></td><td>1rem = 根元素的 <code>font-size</code> 值</td></tr><tr><td>%</td><td>包含块尺寸</td><td><code>width: 50%</code></td></tr><tr><td>vw, vh</td><td>视口尺寸</td><td>1vw = 1%视口宽度</td></tr><tr><td>ch, ex</td><td>字符尺寸</td><td>基于当前字体</td></tr><tr><td>calc()</td><td>数学表达式计算</td><td><code>calc(100% - 20px)</code></td></tr></tbody></table><h4 id="_2-6-属性值标准化" tabindex="-1">2.6. 属性值标准化 <a class="header-anchor" href="#_2-6-属性值标准化" aria-label="Permalink to &quot;2.6. 属性值标准化&quot;">​</a></h4><p><strong>标准化操作</strong>：</p><ol><li><p><strong>简写属性展开</strong>：</p><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="复制代码" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes one-dark-pro one-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">/* 输入 */</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">margin: 10px;</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#A0A1A7;--shiki-light-font-style:italic;">/* 展开为 */</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">margin-top</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">: 10px;</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">margin-right</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">: 10px;</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">margin-bottom</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">: 10px;</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#E45649;">margin-left</span><span style="--shiki-dark:#C678DD;--shiki-light:#A626A4;">: 10px;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li><li><p><strong>关键字转换</strong>：</p><ul><li>auto → 具体计算值</li><li>currentColor → 解析为当前 color 值</li></ul></li><li><p><strong>规范化值</strong>：</p><ul><li>颜色：RGB() → 十六进制颜色值</li><li>长度：10em → px</li><li>...</li></ul></li></ol><h4 id="_2-7-媒体查询处理" tabindex="-1">2.7. 媒体查询处理 <a class="header-anchor" href="#_2-7-媒体查询处理" aria-label="Permalink to &quot;2.7. 媒体查询处理&quot;">​</a></h4>`,8)),(l(),r(p,null,{default:t(()=>[n(e,{id:"mermaid-758",class:"mermaid",graph:"%20%20flowchart%20LR%0A%20%20%E5%AA%92%E4%BD%93%E8%A7%84%E5%88%99%20--%3E%20%E6%9D%A1%E4%BB%B6%E6%A3%80%E6%B5%8B%20--%3E%7C%E5%8C%B9%E9%85%8D%7C%20%E5%BA%94%E7%94%A8%E8%A7%84%E5%88%99%0A%20%20%E6%9D%A1%E4%BB%B6%E6%A3%80%E6%B5%8B%20--%3E%7C%E4%B8%8D%E5%8C%B9%E9%85%8D%7C%20%E5%BF%BD%E7%95%A5%E8%A7%84%E5%88%99%0A"})]),fallback:t(()=>s[7]||(s[7]=[i(" Loading... ")])),_:1})),s[24]||(s[24]=a("h4",{id:"_2-8-伪元素-类处理",tabindex:"-1"},[i("2.8. 伪元素/类处理 "),a("a",{class:"header-anchor",href:"#_2-8-伪元素-类处理","aria-label":'Permalink to "2.8. 伪元素/类处理"'},"​")],-1)),s[25]||(s[25]=a("p",null,[a("strong",null,"注意"),i("： 伪元素的样式在样式计算阶段确定，但对应的渲染节点在后续渲染树构建时才生成。")],-1)),(l(),r(p,null,{default:t(()=>[n(e,{id:"mermaid-765",class:"mermaid",graph:"%20%20flowchart%20LR%0A%20%20DOM%E6%A0%91%20--%E6%A0%B7%E5%BC%8F%E8%AE%A1%E7%AE%97--%3E%20%E6%B8%B2%E6%9F%93%E6%A0%91%0A%20%20%E6%B8%B2%E6%9F%93%E6%A0%91%20--%E6%B7%BB%E5%8A%A0--%3E%20%E4%BC%AA%E5%85%83%E7%B4%A0%E6%B8%B2%E6%9F%93%E5%AF%B9%E8%B1%A1%0A"})]),fallback:t(()=>s[8]||(s[8]=[i(" Loading... ")])),_:1})),s[26]||(s[26]=a("h4",{id:"关键优化策略",tabindex:"-1"},[i("关键优化策略 "),a("a",{class:"header-anchor",href:"#关键优化策略","aria-label":'Permalink to "关键优化策略"'},"​")],-1)),s[27]||(s[27]=a("ol",null,[a("li",null,[a("strong",null,"增量样式计算"),i('：仅更新受影响的"脏"节点')]),a("li",null,[a("strong",null,"样式共享"),i("：相同样式规则复用计算结果")]),a("li",null,[a("strong",null,"惰性计算"),i("：延迟访问时才计算布局属性")])],-1))])}const y=k(g,[["render",c]]);export{_ as __pageData,y as default};
