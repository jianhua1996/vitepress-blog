<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://clark-cui.top/</id>
    <title>Clark Cui</title>
    <updated>2025-07-27T13:09:34.680Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <author>
        <name>Clark Cui</name>
        <email>rongchuancui@gmail.com</email>
        <uri>https://clark-cui.top</uri>
    </author>
    <link rel="alternate" href="https://clark-cui.top/"/>
    <link rel="self" href="https://clark-cui.top/feed.atom"/>
    <subtitle>Clark Cui' Blog</subtitle>
    <logo>https://clark-cui.top/horse.svg</logo>
    <icon>https://clark-cui.top/horse.svg</icon>
    <rights>MIT License</rights>
    <entry>
        <title type="html"><![CDATA[浏览器工作原理（二）]]></title>
        <id>https://clark-cui.top/posts/浏览器渲染原理（二）.html</id>
        <link href="https://clark-cui.top/posts/浏览器渲染原理（二）.html"/>
        <updated>2025-07-27T00:00:00.000Z</updated>
        <content type="html"><![CDATA[<h2>浏览器渲染管线</h2>
<h3>3. 布局阶段 (Layout)</h3>
<p><strong>具体流程</strong></p>
<h4>3.1 构建布局树（Layout Tree）</h4>
<ul>
<li>从渲染树（包含样式信息的 DOM 树）出发，过滤掉不需要渲染的节点：
<ul>
<li>移除 <code>display: none</code> 的元素</li>
<li><strong>保留 <code>visibility: hidden</code> 的元素</strong>（占据空间但不绘制）</li>
</ul>
</li>
<li>生成仅包含可见元素的布局树</li>
<li>布局树节点包含：
<ul>
<li>几何属性（位置、大小）</li>
<li>父元素与子元素的层级关系</li>
</ul>
</li>
</ul>
<h4>3.2 递归计算几何信息</h4>
<p>从根节点（<code>&lt;html&gt;</code>）递归遍历布局树，计算每个元素的<strong>盒模型</strong>和<strong>定位信息</strong>：</p>
<ol>
<li>
<p><strong>确定包含块（Containing Block）</strong>：</p>
<table>
<thead>
<tr>
<th>定位类型</th>
<th>包含块规则</th>
<th>边界类型</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>static</code>/<code>relative</code></td>
<td>最近块级祖先的<strong>内容盒</strong><br>(块容器或格式化上下文祖先)</td>
<td>content box</td>
</tr>
<tr>
<td><code>absolute</code></td>
<td>最近非<code>static</code>祖先的<strong>内边距盒</strong><br>(无则使用初始包含块)</td>
<td>padding box</td>
</tr>
<tr>
<td><code>fixed</code></td>
<td><strong>视口</strong><br>或设置以下属性的祖先：<br><code>transform</code>/<code>perspective</code>/<code>filter</code>/<code>contain: paint</code></td>
<td>padding box</td>
</tr>
<tr>
<td><code>sticky</code></td>
<td>最近<strong>滚动祖先</strong>的内容盒<br>(无则使用视口)</td>
<td>content box</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>关键概念</strong>：包含块是元素尺寸计算（<code>width/height/padding/margin</code>）和位置计算（<code>top/right/bottom/left</code>）的参考基准。<br><strong>依据</strong>：<a href="https://www.w3.org/TR/CSS2/visudet.html#containing-block-details">Definition of &quot;containing block&quot;</a></p>
</blockquote>
</li>
<li>
<p><strong>处理盒模型</strong>：</p>
<ul>
<li>根据 <code>width/height</code> 计算内容区域</li>
<li>处理 <code>padding</code>/<code>border</code>/<code>margin</code> 值</li>
<li><strong>百分比值</strong>：基于包含块的对应尺寸计算</li>
<li><strong>auto 值</strong>：根据布局模式自动计算</li>
</ul>
</li>
<li>
<p><strong>处理定位类型</strong>：</p>
<ul>
<li><strong>正常流</strong>：
<ul>
<li>块级元素：垂直堆叠，宽度填满包含块</li>
<li>行内元素：水平排列（IFC 上下文）
<ul>
<li>计算行高（<code>line-height</code>）</li>
<li>基线对齐（<code>vertical-align</code>）</li>
<li>文本对齐（<code>text-align</code>）</li>
<li>行盒（Line Box）高度计算</li>
</ul>
</li>
</ul>
</li>
<li><strong>浮动</strong>：
<ul>
<li>计算 <code>float: left/right</code> 位置</li>
<li>处理文字环绕效果</li>
</ul>
</li>
<li><strong>绝对定位</strong>：
<ul>
<li>根据包含块计算精确位置</li>
<li>完全脱离文档流</li>
</ul>
</li>
<li><strong>固定定位</strong>：
<ul>
<li>相对于视口定位</li>
<li><strong>特例</strong>：祖先设 <code>transform</code> 时锁定在该祖先</li>
</ul>
</li>
<li><strong>粘性定位</strong>：
<ul>
<li>在滚动容器内切换相对/固定定位
<blockquote>
<p><strong>依据</strong>：<a href="https://drafts.csswg.org/css-position/#positioning-schemes">W3C CSS Positioned Layout §2</a></p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>文字排版</strong>：</p>
<ul>
<li>在行内格式化上下文（IFC）中计算：
<ul>
<li>文本换行位置</li>
<li>行盒高度（由行内最高元素决定）</li>
<li>基线对齐（<code>vertical-align</code>）
<blockquote>
<p><strong>依据</strong>：<a href="https://drafts.csswg.org/css-inline-3/#inline-formatting">W3C CSS Inline Layout §2</a></p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<h4>3.3 处理复杂布局模式</h4>
<ul>
<li>
<p><strong>Flexbox 布局</strong>：</p>
<ul>
<li>计算主轴/交叉轴尺寸</li>
<li>分配剩余空间（<code>flex-grow/shrink</code>）</li>
<li>处理项目对齐（<code>justify-content</code>/<code>align-items</code>）
<blockquote>
<p><strong>依据</strong>：<a href="https://drafts.csswg.org/css-flexbox-1/#layout-algorithm">W3C Flexbox §9</a></p>
</blockquote>
</li>
</ul>
</li>
<li>
<p><strong>Grid 布局</strong>：</p>
<ul>
<li>计算网格轨道（行/列）尺寸</li>
<li>放置网格项目到指定区域</li>
<li>处理网格间隙（<code>gap</code>）
<blockquote>
<p><strong>依据</strong>：<a href="https://drafts.csswg.org/css-grid-2/#grid-layout-algorithm">W3C Grid Layout §11</a></p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h4>3.4 存储布局结果</h4>
<ul>
<li>记录计算得到的几何信息：
<ul>
<li>位置坐标（x, y）</li>
<li>尺寸（width, height）</li>
<li>盒模型各部分值（content/padding/border/margin）</li>
</ul>
</li>
<li>建立空间关系：
<ul>
<li>元素间相对位置</li>
<li>物理重叠情况（为分层阶段准备）</li>
</ul>
</li>
</ul>
]]></content>
        <author>
            <name>Clark Cui</name>
            <email>rongchuancui@gmail.com</email>
            <uri>https://clark-cui.top</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[浏览器工作原理（一）]]></title>
        <id>https://clark-cui.top/posts/浏览器渲染原理（一）.html</id>
        <link href="https://clark-cui.top/posts/浏览器渲染原理（一）.html"/>
        <updated>2025-06-29T00:00:00.000Z</updated>
        <content type="html"><![CDATA[<h2>浏览器的多进程架构</h2>
<h3>进程与线程</h3>
<p><strong>进程</strong>：指计算机中已执行的程序，曾经是分时系统的基本运作单位。在面向进程设计的系统中，是程序的基本执行实体；在面向线程设计的系统中，进程本身不是基本执行单位，而是线程的容器。<br>
<strong>线程</strong>：在计算机科学中，是将进程划分为两个或多个线程（实例）或子进程，由单处理器（单线程）或多处理器（多线程）或多核处理系统并发执行。<br>
参考：<a href="https://zh.wikipedia.org/zh-cn/%E8%A1%8C%E7%A8%8B">进程</a>、<a href="https://zh.wikipedia.org/zh-cn/%E7%BA%BF%E7%A8%8B">线程</a></p>
<h3>浏览器的进程架构</h3>
<p><strong>现代浏览器一般都是多进程架构</strong>，以 Chrome 为例，一个浏览器会启动包括以下进程在内的多个进程，每个进程都有自己的内存空间，进程之间通过 <code>IPC</code> 进行通信：</p>
<ul>
<li>浏览器主进程</li>
<li>GPU 进程</li>
<li>网络进程</li>
<li>存储进程</li>
<li>渲染进程</li>
<li>插件进程</li>
</ul>
<p>下面是浏览器的进程截图：</p>
<ImageBuilder :source="['浏览器进程架构.png']" size="medium"/>
<p>其中，<strong>渲染进程</strong>是我们最应该关注的进程，它负责通过一系列渲染步骤（又称作浏览器渲染管线）将 HTML、JavaScript、CSS、图片等资源最终解析为可以显示和交互的页面。</p>
<p><strong>浏览器中的渲染进程不止会有一个</strong>，通常来讲，我们每次在浏览器中打开一个新的标签页，就会启动一个新的渲染进程。如果是在当前页面打开或跳转，浏览器会判断新页面是否与当前页面属于<strong>同站页面</strong>：</p>
<blockquote>
<p>所谓同站：指的是两个 URL 具有<strong>相同的有效顶级域名 + 二级域名部分</strong>，也就是 eTLD+1</p>
</blockquote>
<p><strong>如果是同站页面，则复用当前页面的渲染进程，否则就会启动一个新的渲染进程</strong>。</p>
<blockquote>
<p>对比同源：指的是 <strong>协议(Scheme)</strong>、<strong>主机名(Hostname)</strong> 和 <strong>端口号(Port)</strong> 完全相同。</p>
</blockquote>
<p>如下图所示：<br>
<ImageBuilder :source="['浏览器进程架构-同站进程复用1.png','浏览器进程架构-同站进程复用2.png','浏览器进程架构-同站进程复用3.png']" size="medium" /></p>
<p><code>baidu.com</code> 和 <code>tieba.baidu.com</code> 复用同一个浏览器进程，因为它们是同站页面。<br>
而 <code>baidu.com</code> 和 <code>taobao.com</code> 则不会复用同一个浏览器进程，因为它们不是同站页面。</p>
<blockquote>
<p>多进程架构的优势：崩溃隔离，沙箱化等，参考<a href="https://developer.chrome.com/blog/inside-browser-part1?hl=zh-cn#the_benefit_of_multi-process_architecture_in_chrome">Chrome 中多进程架构的好处</a></p>
</blockquote>
<hr>
<h2>浏览器渲染管线</h2>
<p>我们把从输入数据（通常是 HTML、CSS、JavaScript）到显示结果（屏幕上看到的画面）这整个过程称为浏览器的渲染流程，或者叫渲染管线。</p>
<p>按照渲染的时间顺序，渲染管线可分为如下几个子阶段：</p>
<ol>
<li>构建 DOM 树</li>
<li>样式计算</li>
<li>布局阶段</li>
<li>分层阶段</li>
<li>绘制阶段</li>
<li>分块</li>
<li>光栅化</li>
<li>合成</li>
</ol>
<p>这个过程也被称为<a href="https://developer.mozilla.org/en-US/docs/Web/Performance/Critical_rendering_path">关键渲染路径(Critical Rendering Path)</a>。</p>
<h3>1. HTML 解析与 DOM 树构建流程</h3>
<p>HTML 解析是浏览器渲染管线的第一步，它将 HTML 文档转换为 DOM 树。这个过程遵循<a href="https://html.spec.whatwg.org/multipage/parsing.html#parsing">WHATWG HTML 标准</a>中定义的算法。</p>
<h4>1.1 字节流解码（Byte Decoding）</h4>
<p><strong>目标</strong>：将原始字节流转换为可读字符<br>
<strong>编码识别顺序</strong>：</p>
<ol>
<li><a href="https://encoding.spec.whatwg.org/#bom-sniff">BOM 嗅探</a> (BOM sniffing)（最高优先级）</li>
<li>检查 HTTP 响应头中的<code>Content-Type</code>字段（如<code>Content-Type: text/html; charset=UTF-8</code>）</li>
<li>检查文档是否与一个已确定编码的 <code>Document</code> 关联(需同源)，如果是，使用关联的 <code>Document</code> 编码</li>
<li>检查 HTML 文档中的 <code>&lt;meta&gt;</code>标签
<ul>
<li>对于 HTML5 文档，优先识别<code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code></li>
<li>对于旧版 HTML，识别<code>&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=GBK&quot;&gt;</code></li>
</ul>
</li>
<li>检查资源地址/用户地区设置</li>
</ol>
<blockquote>
<p>BOM 优先级最高，若存在 BOM 则忽略 HTTP 头中的 charset 声明</p>
</blockquote>
<hr>
<h4>1.2 令牌化（Tokenization）</h4>
<p><strong>目标</strong>：将字符串切割为有意义的语法单元（Tokens）<br>
<strong>分词规则</strong>：</p>
<ul>
<li><code>&lt;div&gt;</code> → <strong>开始标签 Token</strong></li>
<li><code>&lt;/div&gt;</code> → <strong>结束标签 Token</strong></li>
<li><code>id=&quot;app&quot;</code> → <strong>属性 Token</strong>（作为开始标签的一部分）</li>
<li><code>Hello</code> → <strong>文本 Token</strong>，标签之间的文字</li>
<li><code>&lt;!-- 注释内容 --&gt;</code> → <strong>注释 Token</strong></li>
</ul>
<p>这一阶段会处理 HTML 的 &quot;容错性&quot;：对不规范语法（如未闭合标签、错误嵌套）进行自动修正</p>
<hr>
<h4>1.3 DOM 树构建（Tree Construction）</h4>
<p><strong>目标</strong>：将 Token 序列转换为具有层级关系的 DOM（文档对象模型）树<br>
<strong>关键机制</strong>：</p>
<ul>
<li>使用<a href="https://html.spec.whatwg.org/multipage/parsing.html#the-stack-of-open-elements">开放元素栈</a>维护元素的层级关系</li>
<li>根据令牌类型创建相应的节点：
<ul>
<li>开始标签令牌创建元素节点</li>
<li>文本令牌创建文本节点</li>
<li>注释令牌创建注释节点</li>
<li>结束标签令牌不创建节点，而是完成元素的构建</li>
</ul>
</li>
<li>每个节点根据 HTML 规范确立父-子-兄弟关系</li>
</ul>
<p><strong>HTML 容错处理</strong>：</p>
<ul>
<li>自动补全缺失的<code>&lt;html&gt;</code>、<code>&lt;head&gt;</code>、<code>&lt;body&gt;</code>标签</li>
<li>纠正错误的嵌套顺序（如<code>&lt;p&gt;</code>中嵌套<code>&lt;div&gt;</code>时自动闭合<code>&lt;p&gt;</code>）</li>
<li>处理未闭合的标签</li>
</ul>
<p><strong>脚本处理</strong>：</p>
<p>当解析器遇到<code>&lt;script&gt;</code>标签时，会暂停 DOM 构建并执行脚本：</p>
<ol>
<li>按文档顺序同步阻塞解析（除非标记<code>defer</code>/<code>async</code>）</li>
<li>脚本仅能访问<strong>已构建</strong>的 DOM 节点</li>
<li>特殊行为：
<ul>
<li><code>document.write()</code>：在解析中调用时<strong>插入新内容并重启解析</strong></li>
</ul>
</li>
</ol>
<hr>
<h4>1.4 文档就绪事件（Document Readiness）</h4>
<p><strong>事件触发逻辑</strong>：</p>
<pre><code class="language-mermaid">flowchart TD
    A[DOM树构建完成] --&gt; B[执行defer脚本]
    B --&gt; C[触发DOMContentLoaded]
    C --&gt; D[等待图片/CSS加载]
    D --&gt; E[触发load事件]
</code></pre>
<h4>构建过程的核心优化机制</h4>
<ul>
<li>
<p><strong>增量构建（Incremental Build）</strong></p>
<ul>
<li>浏览器采用增量构建策略，在解析过程中<strong>分批生成 DOM 节点</strong>（无固定大小阈值），允许用户提前看到部分内容（如文本先显示）</li>
</ul>
</li>
<li>
<p><strong>预解析扫描器（Preload Scanner）</strong></p>
<ul>
<li>主解析器在解析 HTML 时，会启动一个轻量级的扫描器（独立线程）提前发现并下载 CSS/JS/图片资源</li>
</ul>
</li>
<li>
<p><strong>回流最小化（Layout Thrashing Avoidance）</strong></p>
<ul>
<li>构建过程中如果 JS 读取布局属性（如 offsetHeight），会强制触发同步布局计算（重排），导致性能问题，因此应避免在 DOM 构建过程中读取布局属性</li>
</ul>
</li>
</ul>
<h3>2. 样式计算</h3>
<p>样式计算是浏览器渲染管线中的关键步骤，它将 DOM 树和 CSS 规则结合生成带有样式的渲染树。此过程遵循<a href="https://www.w3.org/TR/css-syntax-3/">W3C CSS Syntax Level 3</a>和<a href="https://www.w3.org/TR/css-cascade-4/">CSS Cascading and Inheritance Level 4</a>等规范。</p>
<h4>2.1 CSSOM 树构建</h4>
<pre><code class="language-mermaid">flowchart TD
    A[原始CSS文本] --&gt; B[字节流解码]
    B --&gt; C[令牌化]
    C --&gt; D[解析CSS规则]
    D --&gt; E[构建CSSOM树]
</code></pre>
<p><strong>关键步骤</strong>：</p>
<ol>
<li><strong>CSS 解析器初始化</strong>
<ul>
<li>创建样式表对象（CSSStyleSheet）</li>
<li>初始化规则列表（CSSRuleList）</li>
</ul>
</li>
<li><strong>规则解析</strong>：<pre><code class="language-javascript">// CSS 规范定义的规则类型（根据CSS Object Model规范）
interface CSSRule {
	const unsigned short      STYLE_RULE = 1;
	const unsigned short      CHARSET_RULE = 2;
	const unsigned short      IMPORT_RULE = 3;
	const unsigned short      MEDIA_RULE = 4;
	const unsigned short      FONT_FACE_RULE = 5;
	const unsigned short      PAGE_RULE = 6;
	const unsigned short      KEYFRAMES_RULE = 7;
	const unsigned short      NAMESPACE_RULE = 10;
}
</code></pre>
</li>
<li><strong>错误处理</strong>：
<ul>
<li>根据 <a href="https://www.w3.org/TR/css-syntax-3/#error-handling">CSS Parsing Level 3 规范</a>，跳过无效规则</li>
<li>保留有效部分继续解析</li>
</ul>
</li>
</ol>
<h4>2.2 样式规则匹配</h4>
<p><strong>匹配过程</strong>：</p>
<pre><code class="language-mermaid">flowchart LR
    D[DOM节点] --&gt; S[选择器引擎]
    S --&gt;|遍历| R[CSS规则]
    R --&gt; M[匹配结果]

</code></pre>
<p><strong>匹配算法</strong>：</p>
<ol>
<li><strong>从右向左匹配</strong>：
<ul>
<li>先匹配最具体的选择器部分（如.class 或#id）</li>
<li>再验证祖先关系（如 div .class）</li>
</ul>
</li>
<li><strong>选择器特异性计算</strong>：</li>
</ol>
<pre><code class="language-text">特异性值 = (a, b, c, d)
a = 来自style属性的规则（存在则为1，否则0）
b = ID选择器的规则数量
c = 类/属性/伪类选择器的规则数量
d = 元素/伪元素选择器的规则数量

</code></pre>
<ol start="3">
<li><strong>规则匹配优化</strong>：
<ul>
<li>使用 Bloom 过滤器快速排除不匹配规则</li>
<li>对常见选择器模式建立索引</li>
</ul>
</li>
</ol>
<h4>2.3 优先级计算（层叠算法）</h4>
<p>样式层叠遵循<a href="https://www.w3.org/TR/css-cascade-4/#cascading">CSS Cascading and Inheritance 规范</a>定义的层叠顺序：</p>
<ol>
<li>
<p><strong>来源优先级（升序）</strong>：</p>
<pre><code class="language-text">1. 用户代理声明（user agent declarations）
2. 用户普通声明（user normal declarations）
3. 作者普通声明（author normal declarations）
4. 作者重要声明（author important declarations）
5. 用户重要声明（user important declarations）
</code></pre>
<blockquote>
<p>名词解释：用户代理声明，浏览器厂商提供的默认样式（即浏览器内置样式）；用户声明，浏览网站的用户定义的样式（比如通过插件书写的样式）；作者声明，由网站开发者编写的 CSS 样式，包括内联样式、嵌入样式、外部样式。</p>
</blockquote>
</li>
<li>
<p><strong>特异性比较</strong>：</p>
<ul>
<li>比较<code>(a,b,c,d)</code>元组，从左到右比较数值</li>
<li>例如：<code>(1,0,0,0) &gt; (0,2,3,0)</code></li>
</ul>
</li>
<li>
<p><strong>出现顺序</strong>：</p>
<ul>
<li>特异性相同的规则，后出现的覆盖先出现的</li>
</ul>
</li>
</ol>
<h4>2.4 继承处理</h4>
<p><strong>继承机制</strong>：</p>
<pre><code class="language-mermaid">flowchart TB
    P[父元素] --&gt;|继承属性| C[子元素]
    C --&gt;|覆盖值| S[指定值]
</code></pre>
<p><strong>关键规则</strong>：</p>
<ol>
<li>
<p><strong>可继承属性</strong></p>
<ul>
<li>字体相关：font-family, font-size</li>
<li>文本相关：color, line-height</li>
<li>可见性：visibility</li>
<li>列表属性：list-style</li>
</ul>
</li>
<li>
<p><strong>继承值计算</strong>：</p>
<p>根据 <a href="https://www.w3.org/TR/css-cascade-4/#inheriting">CSS Cascading and Inheritance 规范</a>：</p>
<pre><code class="language-javascript">if (property.isInherited) {
	computedValue = parent.computedValue
} else {
	computedValue = initialValue
}
</code></pre>
</li>
<li>
<p><strong>特殊关键字</strong>：</p>
<ul>
<li>inherit：强制继承父元素值</li>
<li>initial：使用规范初始值</li>
<li>unset：自动选择 inherit 或 initial</li>
<li>revert：回滚到用户代理样式</li>
</ul>
</li>
</ol>
<h4>2.5 默认值应用</h4>
<ol>
<li>
<p><strong>未定义属性处理</strong>：</p>
<ul>
<li>使用属性规范定义的初始值</li>
<li>例如：display 初始值为 inline</li>
</ul>
</li>
<li>
<p><strong>CSS 全局关键字</strong>：</p>
<table>
<thead>
<tr>
<th>关键字</th>
<th>行为</th>
</tr>
</thead>
<tbody>
<tr>
<td>initial</td>
<td>将属性重置为 CSS 规范定义的初始值</td>
</tr>
<tr>
<td>inherit</td>
<td>继承父元素的值</td>
</tr>
<tr>
<td>unset</td>
<td>继承属性使用 inherit，非继承属性使用 initial</td>
</tr>
<tr>
<td>revert</td>
<td>回滚到用户代理样式</td>
</tr>
</tbody>
</table>
</li>
<li>
<p><strong>UA 样式表应用</strong>：</p>
<pre><code class="language-css">/* 浏览器默认样式示例 */
html {
	display: block; /* 根元素初始值为block */
}
head {
	display: none;
}
</code></pre>
</li>
</ol>
<h4>2.6 相对值转换</h4>
<table>
<thead>
<tr>
<th>相对单位</th>
<th>转换依据</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>em, rem</td>
<td>字体大小</td>
<td>1em = 父元素 font-size</td>
</tr>
<tr>
<td>%</td>
<td>包含块尺寸</td>
<td>width: 50%</td>
</tr>
<tr>
<td>vw, vh</td>
<td>视口尺寸</td>
<td>1vw = 1%视口宽度</td>
</tr>
<tr>
<td>ch, ex</td>
<td>字符尺寸</td>
<td>基于当前字体</td>
</tr>
<tr>
<td>calc()</td>
<td>数学表达式计算</td>
<td>calc(100% - 20px)</td>
</tr>
</tbody>
</table>
<p><strong>计算过程</strong>：</p>
<ol>
<li>递归解析表达式</li>
<li>单位统一转换</li>
<li>最终值计算</li>
</ol>
<h4>2.7 样式属性标准化</h4>
<p><strong>标准化操作</strong>：</p>
<ol>
<li>
<p><strong>简写属性展开</strong>：</p>
<pre><code class="language-css">/* 输入 */
margin: 10px;

/* 展开为 */
margin-top: 10px;
margin-right: 10px;
margin-bottom: 10px;
margin-left: 10px;
</code></pre>
</li>
<li>
<p><strong>关键字转换</strong>：</p>
<ul>
<li>auto → 具体计算值</li>
<li>currentColor → 解析为当前 color 值</li>
</ul>
</li>
<li>
<p><strong>规范化值</strong>：</p>
<ul>
<li>颜色：#RGB → #RRGGBB</li>
<li>长度：0px → 0</li>
<li>角度：360deg → 0deg</li>
</ul>
</li>
</ol>
<h4>2.8 媒体查询应用</h4>
<pre><code class="language-mermaid">flowchart LR
    M[媒体规则] --&gt; C[条件检测]
    C --&gt;|匹配| A[应用规则]
    C --&gt;|不匹配| I[忽略规则]
</code></pre>
<p><strong>检测维度</strong>：</p>
<ol>
<li>设备类型：screen, print, speech</li>
<li>视口尺寸：width, height</li>
<li>显示特性：resolution, orientation</li>
<li>用户偏好：prefers-color-scheme</li>
</ol>
<h4>2.9 伪元素/类处理</h4>
<ol>
<li>
<p><strong>伪类匹配</strong>：</p>
<pre><code class="language-javascript">for (element of DOM) {
	if (element.matches(':hover')) {
		applyHoverStyles()
	}
}
</code></pre>
</li>
<li>
<p><strong>伪元素处理</strong>：</p>
<ul>
<li>伪元素（如::before, ::after）不是真实 DOM 节点，而是在渲染时生成的虚拟节点</li>
<li>应用对应样式规则并在渲染树中创建相应渲染对象</li>
</ul>
</li>
</ol>
<h4>2.10 计算样式树构建</h4>
<pre><code class="language-mermaid">flowchart LR
    D[DOM树] --&gt; S[样式计算]
    S --&gt; C[计算样式树]
    C --&gt; R[渲染树]
</code></pre>
<p><strong>优化机制</strong>：</p>
<ol>
<li>增量更新（仅修改受影响节点）</li>
<li>样式共享（相同样式节点复用）</li>
<li>缓存计算结果</li>
</ol>
]]></content>
        <author>
            <name>Clark Cui</name>
            <email>rongchuancui@gmail.com</email>
            <uri>https://clark-cui.top</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[前端面试题整理：杂篇（一）]]></title>
        <id>https://clark-cui.top/posts/前端面试题整理：杂篇（一）.html</id>
        <link href="https://clark-cui.top/posts/前端面试题整理：杂篇（一）.html"/>
        <updated>2025-03-20T00:00:00.000Z</updated>
        <content type="html"><![CDATA[<h2>什么是协商缓存和强缓存？两者有什么区别？</h2>
<h3>关于 HTTP 缓存</h3>
<p>HTTP 缓存是基于 HTTP 协议的一种机制，通过<strong>存储和重用之前请求的资源副本</strong>（如 HTML、CSS、JavaScript、图片等），减少客户端与服务器之间的重复数据传输，从而<strong>提高网页加载速度、降低服务器负载、节省带宽</strong>。其核心目的是通过重用已有的响应数据，避免每次都从源服务器获取资源。</p>
<p><a href="https://httpwg.org/specs/rfc9111.html">HTTP 缓存标准</a>把缓存分为两类：</p>
<ul>
<li><strong>私有缓存</strong>： 私有缓存是绑定到特定客户端的缓存，通常指浏览器缓存。它存储的响应仅对当前用户可见，不与其他用户共享。适用场景：存储用户的个性化内容（如登录后的页面、用户特定数据）。</li>
<li><strong>共享缓存</strong>：共享缓存位于客户端和服务器之间，存储的响应可被多个用户共享，用于减少服务器负载和网络流量。典型实现：代理服务器（如 Squid、Nginx 反向代理）、CDN 节点、ISP 缓存等。</li>
</ul>
<p><strong>关键性区别总结</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">特性</th>
<th>私有缓存</th>
<th>共享缓存</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">存储位置</td>
<td>客户端</td>
<td>中间层(代理服务器、CDN、反向代理服务器)</td>
</tr>
<tr>
<td style="text-align:center">共享性</td>
<td>私有</td>
<td>共享</td>
</tr>
<tr>
<td style="text-align:center">适用场景</td>
<td>个性化、登录后的页面、用户特定数据</td>
<td>公共资源、静态资源(图片、css)</td>
</tr>
<tr>
<td style="text-align:center">控制指令</td>
<td>Cache-Control: private</td>
<td>Cache-Control: public</td>
</tr>
<tr>
<td style="text-align:center">安全性</td>
<td>仅对当前用户可见，安全</td>
<td>可被多个用户共享，不安全</td>
</tr>
</tbody>
</table>
<h3>HTTP 缓存控制指令</h3>
<p>HTTP 缓存主要通过<strong>请求头和响应头中的字段</strong>(如 <code>Cache-Control</code>、<code>Expires</code>、<code>Last-Modified</code>、<code>ETag</code> 等) 控制缓存策略，分为以下两种工作方式：</p>
<ol>
<li><strong>强缓存</strong>： 强缓存是指浏览器在第一次请求资源并得到响应后，将响应存储在客户端缓存中，后续再请求相同的资源时，<strong>浏览器会直接从缓存中获取响应，而不会向服务器发起请求</strong>。 由 <code>Cache-Control</code>（HTTP 1.1） 或 <code>Expires</code>（HTTP 1.0） 指令控制，如 <code>Cache-Control: max-age=3600</code>，表示缓存 1 小时。</li>
<li><strong>协商缓存</strong>：协商缓存是指客户端在请求资源时，会携带一些请求头信息，如 <code>Last-Modified/If-Modified-Since</code>（使用资源最后修改时间判断）、<code>ETag/If-None-Match</code>（使用资源唯一标识符判断） 等， <strong>服务器根据这些请求头信息判断客户端是否需要更新资源</strong>，如果客户端不需要更新，则返回 304 Not Modified，否则返回 200 OK。</li>
</ol>
<blockquote>
<p>关于协商缓存的具体实现，可以参考 express 的源码中关于缓存的实现逻辑。 <a href="https://github.com/expressjs/express/blob/master/lib/request.js#L457">链接地址</a></p>
</blockquote>
<h3>缓存破坏（解决前端部署后的缓存问题）</h3>
<p>在现代 Web 开发中，JavaScript 和 CSS 资源会随着开发的进展而频繁更新。但<strong>由于其静态资源文件名未改变，浏览器会优先从缓存中获取，从而导致页面加载时出现旧版本的资源</strong>。为了解决这个问题，我们可以通过一些方法来破坏缓存：</p>
<ol>
<li><strong>使用基于版本号或哈希值的文件名</strong>： 在构建时，使用基于版本号或哈希值的文件名，如 <code>main.js?v=1.0.0</code>，这样每次部署后文件名都会改变，从而破坏缓存。（一些成熟的构建工具如 Webpack、Vite 等，都提供了内置的版本号或哈希值生成功能）</li>
<li><strong>对于主资源禁用缓存</strong>： 与子资源不同，主资源的 URL 不能像子资源 URL 一样被修饰，这时我们可以在 html 的 head 标签中添加以下内容，防止其被浏览器缓存。</li>
</ol>
<pre><code class="language-html">&lt;meta
	http-equiv=&quot;Cache-Control&quot;
	content=&quot;no-cache, no-store, must-revalidate&quot;
/&gt;
&lt;meta
	http-equiv=&quot;Pragma&quot;
	content=&quot;no-cache&quot;
/&gt;
&lt;meta
	http-equiv=&quot;Expires&quot;
	content=&quot;0&quot;
/&gt;
</code></pre>
<blockquote>
<p>注意： 现代浏览器可能忽略 Meta 标签，因此必须结合 HTTP 头使用。</p>
</blockquote>
<pre><code class="language-Nginx">location / {
    add_header Cache-Control &quot;no-store, no-cache, must-revalidate&quot;;
    add_header Pragma &quot;no-cache&quot;;
    expires 0;
}
</code></pre>
]]></content>
        <author>
            <name>Clark Cui</name>
            <email>rongchuancui@gmail.com</email>
            <uri>https://clark-cui.top</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[前端工作中的经验与教训]]></title>
        <id>https://clark-cui.top/posts/前端开发常见错觉.html</id>
        <link href="https://clark-cui.top/posts/前端开发常见错觉.html"/>
        <updated>2025-03-18T00:00:00.000Z</updated>
        <content type="html"><![CDATA[<h2>关于表单元素 input 上的 v-model 绑定</h2>
<p>一直以来我都有个错觉，认为在 input 等输入类型的表单元素上，v-model 指令绑定的是 <code>value</code> 属性和 <code>change</code> 事件，直到后来自己封装某个自定义指令的时候（需要手动触发一下双向绑定），使用 dispatch 分发 <code>change</code> 事件并没有触发绑定值的更新，遂去翻看文档，发现了以下内容。</p>
<ImageBuilder :source="['错觉_v-model.jpg']" size="large" />
<p>看来有些事情还是不能想当然，多看文档总是对的。。。</p>
<blockquote>
<p>总结： 官方文档中，input 元素上的 v-model 绑定的是 <code>value</code> 属性和 <code>input</code> 事件。</p>
</blockquote>
<h2>Axios 提交 Date 类型数据时的时区自动变更问题</h2>
<h3>问题描述</h3>
<p>在使用 <code>Axios</code> 提交 Date 类型的数据时，发现请求体中的时间总是与代码中的时间不一致，这使我非常困惑。这个问题是在某次改项目中的 bug 时发现的，排查了很久。</p>
<h3>根本原因</h3>
<p><code>Axios</code> 对于提交的 Date 类型的数据，会将其序列化为时间字符串。<br>
这里涉及到 <code>JavaScript</code> 语言在序列化 Date 对象时的默认行为：</p>
<p><strong><code>JavaScript</code> 语言在序列化 Date 对象时（如通过 <code>JSON.stringify</code>），会调用 <code>Date.prototype.toISOString()</code> 方法，将日期转换为 ISO 8601 格式（如 2025-05-04T01:00:00.000Z）</strong>。其中的 Z 表示 UTC 时间（0 时区），而本地时间（如东八区）会被自动转换为 UTC 时间（减去 8 小时）。如图：</p>
<ImageBuilder :source="['Snipaste_Date序列化的问题.png']" size="large" />
<blockquote>
<p>为什么要这样做？JavaScript 语言这样做的合理性： Date 对象的 ISO 序列化是为了标准化时间表示，便于跨系统传输。UTC 时间是国际通用标准，因此 JavaScript 的行为是合理的。</p>
</blockquote>
<h3>解决方案</h3>
<ol>
<li><strong>不要直接提交 Date 类型的数据</strong>，而是将 Date 对象转换为本地时间字符串，然后再提交。</li>
<li>后端进行时区处理</li>
</ol>
<h2>关于使用 CSS order 属性在不改变 dom 结构的情况下改变元素的显示顺序</h2>
<p>是这样的，最近我在维护一个项目的时候遇到这样一个需求，<code>页面上有一个元素，它的内部有两个子元素，它们的dom结构从上到下是 A -&gt; B，现在我希望让 B 显示在父盒子的左侧， A 显示在右侧，并且 A 的宽度是父盒子的宽度减去B的宽度（也就是 A 要自适应剩余的宽度）</code>。</p>
<p>这种情况下使用 flex 布局 + order 属性 正好可以解决这个问题。</p>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
	&lt;head&gt;
		&lt;meta charset=&quot;UTF-8&quot; /&gt;
		&lt;meta
			name=&quot;viewport&quot;
			content=&quot;width=device-width, initial-scale=1.0&quot;
		/&gt;
		&lt;title&gt;Document&lt;/title&gt;
		&lt;style&gt;
			.container {
				display: flex;
				width: 300px;
				color: #fff;
			}
			.item1 {
				order: 2;
				flex: 1;
				background-color: blue;
			}
			.item2 {
				order: 1;
				width: 50px;
				background-color: red;
			}
		&lt;/style&gt;
	&lt;/head&gt;
	&lt;body&gt;
		&lt;div class=&quot;container&quot;&gt;
			&lt;div class=&quot;item1&quot;&gt;item1&lt;/div&gt;
			&lt;div class=&quot;item2&quot;&gt;item2&lt;/div&gt;
		&lt;/div&gt;
	&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<ImageBuilder :source="['order属性.png']" size="large"/>
<p>🔗<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/order">查看 mdn 关于 order 属性的描述</a></p>
]]></content>
        <author>
            <name>Clark Cui</name>
            <email>rongchuancui@gmail.com</email>
            <uri>https://clark-cui.top</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[前端面试题整理：Vue篇（二）]]></title>
        <id>https://clark-cui.top/posts/前端面试题整理：Vue篇（二）.html</id>
        <link href="https://clark-cui.top/posts/前端面试题整理：Vue篇（二）.html"/>
        <updated>2024-10-18T00:00:00.000Z</updated>
        <content type="html"><![CDATA[<h2>Vue-Router 的两种路由模式？</h2>
<p>Vue-Router 支持两种路由模式：hash 和 history。</p>
<ul>
<li><strong>hash 模式</strong>：使用 URL 的 hash 来存储路由信息，即 URL 中会包含一个 # 符号，如：<a href="http://www.example.com/#/about%E3%80%82">http://www.example.com/#/about。</a></li>
<li><strong>history 模式</strong>：使用 HTML5 的 history API 来存储路由信息，即 URL 中不会包含 # 符号，如：<a href="http://www.example.com/about%E3%80%82">http://www.example.com/about。</a></li>
</ul>
<p>它们的区别如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">对比项</th>
<th style="text-align:center">Hash 模式</th>
<th style="text-align:center">History 模式</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">URL 美观度</td>
<td style="text-align:center">差</td>
<td style="text-align:center">好</td>
</tr>
<tr>
<td style="text-align:center">需要服务器支持</td>
<td style="text-align:center">否</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center">兼容性</td>
<td style="text-align:center">几乎所有浏览器</td>
<td style="text-align:center">需要支持 HTML5 的 history API</td>
</tr>
<tr>
<td style="text-align:center">SEO 优化</td>
<td style="text-align:center">差(部分爬虫忽略哈希)</td>
<td style="text-align:center">较好</td>
</tr>
<tr>
<td style="text-align:center">部署成本</td>
<td style="text-align:center">低</td>
<td style="text-align:center">高(需要服务器配合)</td>
</tr>
</tbody>
</table>
<blockquote>
<p>history 模式官方配置说明 <a href="https://router.vuejs.org/zh/guide/essentials/history-mode.html#%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE%E7%A4%BA%E4%BE%8B">服务器配置示例</a></p>
</blockquote>
<h2>Vue-Router 有哪些钩子函数？它们的执行顺序？</h2>
<h3>钩子函数类型</h3>
<table>
<thead>
<tr>
<th style="text-align:left">​ 类型 ​</th>
<th style="text-align:left">​ 钩子函数</th>
<th style="text-align:left">​ ​ 触发时机 ​</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">全局守卫</td>
<td style="text-align:left">beforeEach</td>
<td style="text-align:left">全局前置守卫，每次导航前触发</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">beforeResolve</td>
<td style="text-align:left">全局解析守卫，导航被确认前触发（适合处理异步数据）</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">afterEach</td>
<td style="text-align:left">全局后置钩子，导航完成后触发（无 next 参数）</td>
</tr>
<tr>
<td style="text-align:left">路由独享守卫</td>
<td style="text-align:left">beforeEnter</td>
<td style="text-align:left">在单个路由配置中定义，进入该路由前触发</td>
</tr>
<tr>
<td style="text-align:left">组件内守卫</td>
<td style="text-align:left">beforeRouteEnter</td>
<td style="text-align:left">进入组件前触发（无法访问实例）</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">beforeRouteUpdate</td>
<td style="text-align:left">当前路由改变但组件复用时触发（如 /user/:id 参数变化）</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">beforeRouteLeave</td>
<td style="text-align:left">离开组件前触发（常用于阻止用户未保存离开）</td>
</tr>
</tbody>
</table>
<h3>钩子函数执行顺序</h3>
<ol>
<li>导航被触发。</li>
<li><strong>在失活的组件里调用 beforeRouteLeave 守卫</strong>。</li>
<li><strong>调用全局的 beforeEach 守卫</strong>。</li>
<li>在重用的组件里调用 beforeRouteUpdate 守卫(2.2+)。</li>
<li><strong>在路由配置里调用 beforeEnter</strong>。</li>
<li>解析异步路由组件。</li>
<li><strong>在被激活的组件里调用 beforeRouteEnter</strong>。</li>
<li><strong>调用全局的 beforeResolve 守卫(2.5+)</strong>。</li>
<li>导航被确认。</li>
<li><strong>调用全局的 afterEach 钩子</strong>。</li>
<li>触发 DOM 更新。</li>
<li><strong>调用 beforeRouteEnter 守卫中传给 next 的回调函数</strong>，创建好的组件实例会作为回调函数的参数传入</li>
</ol>
<h2>Vue-Router 如何实现路由懒加载？</h2>
<p>Vue-Router 默认支持路由懒加载，即在需要时才加载路由组件，从而提高性能。<br>
在 Vue-Router 中，路由的懒加载是通过<strong>动态导入</strong>组件来实现的。</p>
<pre><code class="language-javascript">const Home = () =&gt; import('./views/Home.vue') // 动态导入组件
const About = () =&gt; import('./views/About.vue') // 动态导入组件
const routes = [
	{ path: '/home', component: Home },
	{ path: '/about', component: About }
]
const router = createRouter({})
router.addRoute(routes)
export default router
</code></pre>
<p>在上面的代码中，<code>Home</code> 和 <code>About</code> 组件都是通过动态导入的方式定义的，即使用 <code>() =&gt; import('./views/Home.vue')</code> 的形式。<br>
这样，当用户访问 <code>/home</code> 或 <code>/about</code> 路径时，相应的组件才会被加载，从而实现了路由懒加载。</p>
<blockquote>
<p>需要注意的是，路由的动态导入（即路由懒加载）​ <strong>必须依赖打包工具的支持</strong>才能实现真正的代码分割和按需加载。</p>
</blockquote>
]]></content>
        <author>
            <name>Clark Cui</name>
            <email>rongchuancui@gmail.com</email>
            <uri>https://clark-cui.top</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[前端面试题整理：Vue篇（一）]]></title>
        <id>https://clark-cui.top/posts/前端面试题整理：Vue篇（一）.html</id>
        <link href="https://clark-cui.top/posts/前端面试题整理：Vue篇（一）.html"/>
        <updated>2024-10-17T00:00:00.000Z</updated>
        <content type="html"><![CDATA[<h2>对 Vue 框架的理解</h2>
<h3>Vue 是什么?</h3>
<p>Vue 是一个<strong>响应式</strong>的、<strong>数据驱动</strong>的 JavaScript 框架。</p>
<h3>Vue 为什么出现？Vue 的出现解决了什么问题？</h3>
<p>在 Vue 这种响应式的框架出现之前，前端大致经历了几个发展阶段：</p>
<ol>
<li>完全静态页面时期，前端展示的内容通常只是一个静态的页面，没有什么动态特性</li>
<li>早期的服务端渲染时期，以 jsp、asp、php 这种在服务端组织 HTML 代码为主的形式，前后端通常不分离，前端的工作包含在后端之中</li>
<li>JQuery + Ajax 时期，Ajax 的出现，也促使了前后端的分离，这时候前端可以通过 Ajax 的形式动态的从服务器获取内容，然后使用 JQuery 之类的库将获取到的数据通过 Dom 操作的形式更新到页面上</li>
<li>现代 JavaScript 框架时期，Angular、React、Vue 等响应式框架出现，前端可以从 Dom 操作中分离，只关心数据和视图，响应式框架负责 Dom Diff（或脏检查）和更新</li>
</ol>
<p>Vue 等响应式框架的出现，<strong>解决的是原来前端需要频繁的通过 JQuery 或者原生 api 操作 Dom 来更新界面的问题</strong>，Vue 等响应式框架出现后，前端可以<strong>从 Dom 操作中分离出来，只需要关注数据和视图</strong>就可以了。</p>
<h3>Vue 如何实现的响应式和数据驱动？</h3>
<p>Vue 的响应式是通过<strong>数据劫持</strong>的相关 api 来实现的，2.0 是<code>Object.defineProperty</code>,3.0 是<code>Proxy</code>，数据驱动是通过<strong>观察者模式</strong>模式来实现的。</p>
<h2>对 Vue 中双向绑定的理解</h2>
<h3>什么是双向绑定？</h3>
<p>双向绑定指的是，当数据模型发生改变时，对应的视图也会自动发生改变，反过来，当视图有变化时，数据模型也会随之改变。</p>
<h3>双向绑定的实现？</h3>
<p>主要是通过<strong>数据劫持</strong>和<strong>事件监听</strong></p>
<p>通过拦截数据模型的访问和修改，实现数据的自动同步。通过监听视图中的用户输入事件（如 input、change 等），实现视图到数据模型的同步。</p>
<h2>对 SPA（单页面应用）的理解</h2>
<h3>什么是 SPA？</h3>
<p>SPA（Single Page Application，单页应用）是一种 Web 应用程序的设计模式，它通过动态加载内容来实现页面的无刷新更新。SPA 的核心思想是在用户与应用程序交互时，只加载和更新必要的部分内容，而不是整个页面。这种设计模式可以提供更流畅的用户体验，减少页面加载时间，并提高应用程序的响应速度。</p>
<h3>SPA 的特点？</h3>
<ol>
<li>
<p><strong>无刷新页面更新</strong>：SPA 通过动态加载内容来实现页面的无刷新更新，用户在浏览应用程序时不会看到页面重新加载的过程。</p>
</li>
<li>
<p><strong>前端路由</strong>：SPA 通常使用前端路由（Front-End Routing）来管理页面导航。前端路由通过 JavaScript 来处理 URL 的变化，并根据 URL 加载相应的页面内容。</p>
</li>
<li>
<p><strong>前后端分离</strong>：SPA 通常采用前后端分离的架构，前端负责页面渲染和用户交互，后端负责提供数据和服务。</p>
</li>
<li>
<p><strong>动态内容加载</strong>：SPA 通过 AJAX、Fetch API 等技术动态加载内容，而不是通过传统的页面刷新来加载内容。</p>
</li>
</ol>
<h3>SPA 的实现？</h3>
<p>SPA 的实现<br>
SPA 的实现通常依赖于以下几个核心技术：</p>
<ul>
<li>
<p><strong>前端框架</strong>：如 React、Vue.js、Angular 等，这些框架提供了组件化开发、状态管理和前端路由等功能，帮助开发者构建复杂的 SPA。</p>
</li>
<li>
<p><strong>前端路由</strong>：如 React Router、Vue Router、Angular Router 等，这些库提供了前端路由功能，帮助开发者管理页面导航和 URL 变化。</p>
</li>
<li>
<p><strong>AJAX/Fetch API</strong>：用于动态加载数据，实现页面的无刷新更新。</p>
</li>
<li>
<p><strong>状态管理</strong>：如 Redux、Vuex、MobX 等，用于管理应用程序的状态，确保状态的一致性和可预测性。</p>
</li>
</ul>
<h2>为什么 Vue 中的 data 属性是一个函数而不是一个对象？</h2>
<p>为了实现组件的<strong>数据隔离</strong>。</p>
<p>当一个组件被多次使用时，如果 data 属性是一个对象，那么多个组件实例将共享同一个 data 对象，这可能导致数据的混乱和不可预测性。</p>
<p>而如果 data 属性是一个函数，每个组件实例都会调用该函数来返回一个新的 data 对象，这样每个组件实例都会有自己独立的数据副本，避免了数据共享的问题。</p>
<h2>Vue 组件之间传值有几种方式？</h2>
<h3>1. 父子组件之间传值</h3>
<h4>父传子 - props</h4>
<pre><code class="language-html">&lt;!-- 父组件 --&gt;
&lt;template&gt;
	&lt;ChildComponent :message=&quot;parentMessage&quot; /&gt;
&lt;/template&gt;

&lt;script&gt;
	import ChildComponent from './ChildComponent.vue'
	export default {
		components: {
			ChildComponent
		},
		data() {
			return {
				parentMessage: 'Hello from Parent!'
			}
		}
	}
&lt;/script&gt;

&lt;!-- 子组件 --&gt;
&lt;template&gt;
	&lt;div&gt;{{ message }}&lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
	export default {
		props: {
			message: {
				type: String
			}
		}
	}
&lt;/script&gt;
</code></pre>
<h4>子传父 - $emit</h4>
<pre><code class="language-html">&lt;!-- 父组件 --&gt;
&lt;template&gt;
	&lt;ChildComponent @child-event=&quot;handleEvent&quot; /&gt;
&lt;/template&gt;

&lt;script&gt;
	import ChildComponent from './ChildComponent.vue'
	export default {
		components: {
			ChildComponent
		},
		methods: {
			handleEvent(data) {
				console.log(data) // 接收到的数据
			}
		}
	}
&lt;/script&gt;

&lt;!-- 子组件 --&gt;
&lt;template&gt;
	&lt;button @click=&quot;sendData&quot;&gt;Send Data&lt;/button&gt;
&lt;/template&gt;

&lt;script&gt;
	export default {
		methods: {
			sendData() {
				this.$emit('child-event', 'Hello from Child!')
			}
		}
	}
&lt;/script&gt;
</code></pre>
<h3>2. 兄弟组件之间传值</h3>
<h4>通过父组件作为中介（使用父组件的状态和方法）</h4>
<pre><code class="language-html">&lt;!-- 父组件 --&gt;
&lt;template&gt;
	&lt;SiblingA @updateParentState=&quot;updateState&quot; /&gt;
	&lt;SiblingB :state=&quot;parentState&quot; /&gt;
&lt;/template&gt;

&lt;script&gt;
	import SiblingA from './SiblingA.vue'
	import SiblingB from './SiblingB.vue'

	export default {
		components: {
			SiblingA,
			SiblingB
		},
		data() {
			return {
				parentState: ''
			}
		},
		methods: {
			updateState(newState) {
				this.parentState = newState
			}
		}
	}
&lt;/script&gt;

&lt;!-- SiblingA --&gt;
&lt;template&gt;
	&lt;button @click=&quot;updateState&quot;&gt;Update State&lt;/button&gt;
&lt;/template&gt;

&lt;script&gt;
	export default {
		methods: {
			updateState() {
				this.$emit('updateParentState', 'New State')
			}
		}
	}
&lt;/script&gt;

&lt;!-- SiblingB --&gt;
&lt;template&gt;
	&lt;div&gt;{{ state }}&lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
	export default {
		props: {
			state: String
		}
	}
&lt;/script&gt;
</code></pre>
<h3>3. 全局事件总线</h3>
<h4>创建一个全局的 Vue 实例作为事件中心，用于非父子关系的组件间通信。</h4>
<pre><code class="language-js">// eventBus.js
import Vue from 'vue';
export const EventBus = new Vue();

// 组件 A
import { EventBus } from './eventBus';

export default {
  methods: {
    sendData() {
      EventBus.$emit('global-event', 'Hello from Component A!');
    }
  }
};

// 组件 B
import { EventBus } from './eventBus';

export default {
  created() {
    EventBus.$on('global-event', this.handleEvent);
  },
  beforeDestroy() {
    EventBus.$off('global-event', this.handleEvent);
  },
  methods: {
    handleEvent(data) {
      console.log(data); // 接收到的数据
    }
  }
};
</code></pre>
<h3>4. 全局状态管理（Vuex）</h3>
<pre><code class="language-js">// store.js
import Vue from 'vue'
import Vuex from 'vuex'

Vue.use(Vuex)

export default new Vuex.Store({
	state: {
		count: 0
	},
	mutations: {
		increment(state) {
			state.count++
		}
	},
	actions: {
		increment({ commit }) {
			commit('increment')
		}
	},
	getters: {
		getCount: state =&gt; state.count
	}
})

// main.js
import Vue from 'vue'
import App from './App.vue'
import store from './store'

new Vue({
	store,
	render: h =&gt; h(App)
}).$mount('#app')
</code></pre>
<pre><code class="language-html">// 组件中使用
&lt;template&gt;
	&lt;div&gt;{{ $store.getters.getCount }}&lt;/div&gt;
	&lt;button @click=&quot;$store.dispatch('increment')&quot;&gt;Increment&lt;/button&gt;
&lt;/template&gt;
</code></pre>
<h3>5. ref 引用</h3>
<h4>父组件可以通过 ref 属性引用子组件，并通过 $refs 访问子组件实例。</h4>
<pre><code class="language-html">&lt;!-- 父组件 --&gt;
&lt;template&gt;
	&lt;ChildComponent ref=&quot;child&quot; /&gt;
	&lt;button @click=&quot;callChildMethod&quot;&gt;Call Child Method&lt;/button&gt;
&lt;/template&gt;

&lt;script&gt;
	import ChildComponent from './ChildComponent.vue'
	export default {
		components: {
			ChildComponent
		},
		methods: {
			callChildMethod() {
				this.$refs.child.childMethod()
			}
		}
	}
&lt;/script&gt;

&lt;!-- 子组件 --&gt;
&lt;script&gt;
	export default {
		methods: {
			childMethod() {
				console.log('Called child method')
			}
		}
	}
&lt;/script&gt;
</code></pre>
<h3>6. Provide/Inject</h3>
<h4>上层组件通过 provide 选项提供数据，下层组件通过 inject 选项注入数据。</h4>
<pre><code class="language-html">&lt;!-- 上层组件 --&gt;
&lt;template&gt;
	&lt;div&gt;
		&lt;ChildComponent /&gt;
	&lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
	export default {
		provide() {
			return {
				parentData: 'Hello from Parent!'
			}
		}
	}
&lt;/script&gt;

&lt;!-- 下层组件 --&gt;
&lt;template&gt;
	&lt;div&gt;{{ parentData }}&lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
	export default {
		inject: ['parentData']
	}
&lt;/script&gt;
</code></pre>
<h2>Vue 组件生命周期</h2>
<p>Vue 组件的生命周期包括以下几个阶段：</p>
<ol>
<li><strong>beforeCreate</strong>：组件实例被创建之前调用。</li>
<li><strong>created</strong>：组件实例被创建之后调用。</li>
<li><strong>beforeMount</strong>：组件挂载之前调用。</li>
<li><strong>mounted</strong>：组件挂载之后调用。</li>
<li><strong>beforeUpdate</strong>：组件更新之前调用。</li>
<li><strong>updated</strong>：组件更新之后调用。</li>
<li><strong>beforeDestroy</strong>：组件销毁之前调用。</li>
<li><strong>destroyed</strong>：组件销毁之后调用。</li>
</ol>
<p>父子组件触发生命周期的顺序：</p>
<pre><code class="language-markdown">挂载阶段:
父: beforeCreate → created → beforeMount
子: beforeCreate → created → beforeMount → mounted
父: mounted

更新阶段:
父: beforeUpdate
子: beforeUpdate → updated
父: updated

销毁阶段:
父: beforeDestroy
子: beforeDestroy → destroyed
父: destroyed
</code></pre>
<p><strong>父组件总是在子组件的 mouted、updated、destroyed 生命周期函数调用之后再调用自身对应的生命周期函数，如果子组件的生命周期函数中存在异步操作，也不会等待其执行完毕，而是会立即继续执行，即：</strong></p>
<ol>
<li>父 mounted → 在 所有子组件 mounted 之后</li>
<li>父 updated → 在 所有子组件 updated 之后</li>
<li>父 destroyed → 在 所有子组件 destroyed 之后</li>
</ol>
<ImageBuilder :source="['lifecycle.jpg']" />
<h2>v-if 和 v-show 的区别</h2>
<table>
<thead>
<tr>
<th style="text-align:center">特性</th>
<th style="text-align:center">v-if</th>
<th style="text-align:center">v-show</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>原理</strong></td>
<td style="text-align:center">真实的添加/删除 DOM 元素</td>
<td style="text-align:center">控制 CSS 样式 display</td>
</tr>
<tr>
<td style="text-align:center"><strong>编译过程</strong></td>
<td style="text-align:center">编译时有条件分支</td>
<td style="text-align:center">编译时无条件分支</td>
</tr>
<tr>
<td style="text-align:center"><strong>初始渲染</strong></td>
<td style="text-align:center">惰性的，如果初始条件为假，则什么也不做</td>
<td style="text-align:center">不管初始条件如何，始终都会渲染</td>
</tr>
<tr>
<td style="text-align:center"><strong>切换开销</strong></td>
<td style="text-align:center">有较高的切换开销，切换过程中会销毁和重建元素</td>
<td style="text-align:center">无切换开销，只是简单的基于 CSS 切换</td>
</tr>
</tbody>
</table>
<h2>v-for 和 v-if 为什么不推荐放在一起</h2>
<p>同时使用 v-for 和 v-if 会导致优先级不明显，在 vue2 中 v-for 的优先级比 v-if 更高，这意味着 v-if 将分别重复运行于每个 v-for 循环中，造成性能浪费。</p>
<h2>watch 和 computed 的区别</h2>
<table>
<thead>
<tr>
<th style="text-align:center">特性</th>
<th style="text-align:center">computed</th>
<th style="text-align:center">watch</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>目的</strong></td>
<td style="text-align:center">基于其他数据生成新的值</td>
<td style="text-align:center">监听数据的变化，并执行相应的操作</td>
</tr>
<tr>
<td style="text-align:center"><strong>返回值</strong></td>
<td style="text-align:center">必须</td>
<td style="text-align:center">不需要</td>
</tr>
<tr>
<td style="text-align:center"><strong>缓存</strong></td>
<td style="text-align:center">有缓存</td>
<td style="text-align:center">无缓存</td>
</tr>
</tbody>
</table>
<h2>nextTick 是什么，它的作用？</h2>
<p><code>nextTick</code> 是 Vue 提供的异步方法，用于 <strong>​ 在下次 DOM 更新循环结束之后执行回调</strong>。它解决了数据变化后 ​ 立即操作 DOM 可能获取旧状态 ​ 的问题。</p>
<h3>为什么需要使用 nextTick？</h3>
<p>由于 Vue 的异步更新机制，<strong>Vue 在检测到数据变化时，不会立即更新 DOM</strong>，而是开启一个队列，缓冲同一事件循环中的所有数据变更。</p>
<h2>Vue2 和 Vue3 的区别</h2>
<h3>响应式系统变更</h3>
<p>核心 API 由<code>Object.defineProperty</code>改为<code>Proxy</code>，带来了以下地方的优化：</p>
<table>
<thead>
<tr>
<th style="text-align:center">特性</th>
<th style="text-align:left">Vue2</th>
<th style="text-align:left">Vue3</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">数组响应式方法</td>
<td style="text-align:left">仅支持 <code>push</code>、<code>pop</code>、<code>shift</code>、<code>unshift</code>、<code>splice</code>、<code>sort</code>、<code>reverse</code></td>
<td style="text-align:left">支持所有数组方法</td>
</tr>
</tbody>
</table>
]]></content>
        <author>
            <name>Clark Cui</name>
            <email>rongchuancui@gmail.com</email>
            <uri>https://clark-cui.top</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Flutter小项目展示]]></title>
        <id>https://clark-cui.top/posts/Flutter小项目展示.html</id>
        <link href="https://clark-cui.top/posts/Flutter小项目展示.html"/>
        <updated>2024-10-09T00:00:00.000Z</updated>
        <content type="html"><![CDATA[<h2>项目一：天气 app</h2>
<ImageBuilder :source="['Snipaste_demo_weather.jpg']" :size="'small'"/>
<p>项目地址：<a href="https://github.com/jianhua1996/flutter-weather">https://github.com/jianhua1996/flutter-weather</a></p>
<h2>项目二：音乐播放器</h2>
<ImageBuilder :source="['Snipaste_demo_music_player.jpg', 'Snipaste_demo_music_player2.jpg', 'Snipaste_demo_music_player3.png', 'Snipaste_demo_music_player5.jpg']" :size="'small'"/>
<p>项目地址：<a href="https://github.com/jianhua1996/flutter-music-player">https://github.com/jianhua1996/flutter-music-player</a></p>
]]></content>
        <author>
            <name>Clark Cui</name>
            <email>rongchuancui@gmail.com</email>
            <uri>https://clark-cui.top</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Flutter组件学习（二）]]></title>
        <id>https://clark-cui.top/posts/Flutter组件学习（二）.html</id>
        <link href="https://clark-cui.top/posts/Flutter组件学习（二）.html"/>
        <updated>2024-10-06T00:00:00.000Z</updated>
        <content type="html"><![CDATA[<h2>1. Card 组件</h2>
<p>Card 组件是 Flutter 中最常用的组件之一，它可以用来显示一些内容，<strong>它的默认样式是一个略微圆角且带有阴影凸起的面板</strong>，Card 组件可以包含一个子组件，也可以没有子组件。Card 组件的主要属性有：</p>
<ul>
<li>color：Card 组件的背景颜色。</li>
<li>elevation：Card 组件的阴影大小。</li>
<li>shape：Card 组件的形状。</li>
<li>clipBehavior：Card 组件的裁剪行为。</li>
<li>child：Card 组件的子组件。</li>
</ul>
<p><a href="https://api.flutter-io.cn/flutter/material/Card-class.html">查看更多属性</a></p>
<p>Card 组件的示例代码如下：</p>
<pre><code class="language-dart">Card(
  color: Colors.blue,
  elevation: 10,
  child: Padding(
    padding: const EdgeInsets.all(8.0),
    child: Text(
      'This is a card',
      style: TextStyle(color: Colors.white),
    ),
  ),
),
</code></pre>
<p>效果如下：</p>
<ImageBuilder :source="['Snipaste_phone_card.png']" />
<h2>2. ListTile 组件</h2>
<p>ListTile 组件是 Flutter 中用来显示列表项的组件，通常与 Listview 组件、Card 组件等一起搭配使用，它可以<strong>用来展示一个标题、一段描述、一张图片或者一个小部件</strong>，ListTile 组件的主要属性有：</p>
<ul>
<li>leading：ListTile 组件的左侧组件，通常是一个小部件。</li>
<li>title：ListTile 组件的标题。</li>
<li>subtitle：ListTile 组件的副标题。</li>
<li>trailing：ListTile 组件的右侧组件，通常是一个小部件。</li>
<li>dense：ListTile 组件是否显示为紧凑模式。</li>
<li>enabled：ListTile 组件是否可以点击。</li>
<li>onTap：ListTile 组件的点击事件。</li>
</ul>
<p><a href="https://api.flutter-io.cn/flutter/material/ListTile-class.html">查看更多属性</a></p>
<p>ListTile 组件的示例代码如下：</p>
<pre><code class="language-dart">ListTile(
  leading: Icon(Icons.person),
  title: Text('标题'),
  subtitle: Text('子标题'),
  trailing: Icon(Icons.arrow_forward),
  dense: true,
  enabled: true,
  onTap: () {
    print('ListTile 被点击了');
  },
)
</code></pre>
<p>效果如下：</p>
<ImageBuilder :source="['Snipaste_phone_listtile.png']" />
<h2>3. CircleAvatar 组件</h2>
<p>CircleAvatar 组件是一个圆形的头像组件，它可以<strong>用来显示用户头像或者其他圆形的图片</strong>，CircleAvatar 组件的主要属性有：</p>
<ul>
<li>backgroundImage：CircleAvatar 组件的背景图片。</li>
<li>backgroundColor：CircleAvatar 组件的背景颜色。</li>
<li>foregroundColor：CircleAvatar 组件的前景颜色。</li>
<li>radius：CircleAvatar 组件的圆角半径。</li>
<li>child：CircleAvatar 组件的子组件。</li>
</ul>
<p><a href="https://api.flutter-io.cn/flutter/material/CircleAvatar-class.html">查看更多属性</a></p>
<p>CircleAvatar 组件的示例代码如下：</p>
<pre><code class="language-dart">CircleAvatar(
  backgroundImage:
      const NetworkImage('https://www.example.com/example.jpg'),
  backgroundColor: Colors.lightGreen.shade100,
  radius: 50,
  child: const FlutterLogo(
    size: 50,
  ),
),
</code></pre>
<p>效果如下：</p>
<ImageBuilder :source="['Snipaste_phone_circleavatar.jpg']" />
<h2>4. Divider 组件</h2>
<p>Divider 组件是一个分割线组件，它可以<strong>用来分隔不同列表项或者不同区域</strong>，Divider 组件的主要属性有：</p>
<ul>
<li>height：Divider 组件的高度。</li>
<li>thickness：Divider 组件的粗细。</li>
<li>indent：Divider 组件距离左侧距离。</li>
<li>endIndent：Divider 组件距离右侧距离。</li>
<li>color：Divider 组件的颜色。</li>
</ul>
<p><a href="https://api.flutter-io.cn/flutter/material/Divider-class.html">查看更多属性</a></p>
<p>Divider 组件的示例代码如下：</p>
<pre><code class="language-dart">Column(
  children: [
    CircleAvatar(
      backgroundImage:
          const NetworkImage('https://www.example.com/example.jpg'),
      backgroundColor: Colors.lightGreen.shade100,
      radius: 50,
      child: const FlutterLogo(
        size: 50,
      ),
    ),
    const Divider(
      height: 10,
      thickness: 2,
      indent: 10,
      endIndent: 10,
      color: Colors.pink,
    ),
  ],
)
</code></pre>
<p>效果如下：</p>
<ImageBuilder :source="['Snipaste_phone_divider.png']" />
<h2>5. ElevatedButton 组件</h2>
<p>ElevatedButton 组件是一个<strong>带有阴影的按钮组件</strong>，它可以<strong>用来触发一些重要的操作，比如提交表单、打开新页面</strong>等，ElevatedButton 组件的主要属性有：</p>
<ul>
<li>onPressed：按钮点击事件。</li>
<li>style：按钮样式。</li>
<li>child：按钮子组件。</li>
</ul>
<p><a href="https://api.flutter-io.cn/flutter/material/ElevatedButton-class.html">查看更多属性</a></p>
<p>ElevatedButton 组件的示例代码如下：</p>
<pre><code class="language-dart">ElevatedButton(
  onPressed: () {
    print('按钮被点击了');
  },
  style: ElevatedButton.styleFrom(
    foregroundColor: Colors.white,
    backgroundColor: Colors.blue,
    shadowColor: Colors.blue.shade700,
    elevation: 12,
  ),
  child: Text('按钮'),
),
</code></pre>
<p>效果如下：</p>
<ImageBuilder :source="['Snipaste_phone_elevatedbutton.png']" />
<h2>6. GestureDetector 组件</h2>
<p>GestureDetector 组件是一个<strong>手势监听器组件</strong>，它可以<strong>用来监听用户的手势操作，比如滑动、点击、长按等</strong>，GestureDetector 组件的主要属性有：</p>
<ul>
<li>onTap：手指单击事件。</li>
<li>onDoubleTap：手指双击事件。</li>
<li>onLongPress：手指长按事件。</li>
<li>child：手势监听器子组件。</li>
</ul>
<p><a href="https://api.flutter-io.cn/flutter/widgets/GestureDetector-class.html">查看更多属性</a></p>
<p>GestureDetector 组件的示例代码如下：</p>
<pre><code class="language-dart">GestureDetector(
  onTap: () {
    print('手指单击了');
  },
  onDoubleTap: () {
    print('手指双击了');
  },
  onLongPress: () {
    print('手指长按了');
  },
  child: Container(
    width: 100,
    height: 100,
    color: Colors.blue,
  ),
),
</code></pre>
<p>效果如下：</p>
<ImageBuilder :source="['Snipaste_phone_gesturedetector.jpg']" />
]]></content>
        <author>
            <name>Clark Cui</name>
            <email>rongchuancui@gmail.com</email>
            <uri>https://clark-cui.top</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Flutter组件学习（一）]]></title>
        <id>https://clark-cui.top/posts/Flutter组件学习（一）.html</id>
        <link href="https://clark-cui.top/posts/Flutter组件学习（一）.html"/>
        <updated>2024-10-04T00:00:00.000Z</updated>
        <content type="html"><![CDATA[<h2>1. Container 组件</h2>
<p>Container 组件是 Flutter 中的<code>布局组件</code>，可以类比为 web 开发中的 div 标签。</p>
<p>它属于单一子组件的容器，接受<code>一个</code> child 参数作为子组件， child 类型<strong>可以是任何 widget，包括其他的 Container 组件</strong>。</p>
<p><strong>容器在没有子元素的情况下会尽量变得尽可能大，除非传入的约束条件是无界的</strong>，在这种情况下，它们会尽量变得尽可能小。</p>
<pre><code class="language-dart">Container(
  decoration: BoxDecoration(
    color: Colors.blue,
  ),
)
</code></pre>
<p>以上代码效果如下：</p>
<ImageBuilder :source="['Snipaste_phone_container1.png']" />
<p><strong>有子元素的容器会根据其子元素的大小来调整自身大小</strong>。</p>
<pre><code class="language-dart">Container(
  decoration: BoxDecoration(
    color: Colors.blue,
  ),
  child: Text('Hello World!'),
),
</code></pre>
<p>以上代码效果如下：</p>
<ImageBuilder :source="['Snipaste_phone_container2.png']" />
<blockquote>
<p>Tips: 如果你希望所有的元素都在安全区域展示，不被系统状态栏、导航栏等系统元素遮挡，可以使用 SafeArea 组件。</p>
</blockquote>
<pre><code class="language-dart">SafeArea(
  child: Container(
    decoration: BoxDecoration(
      color: Colors.blue,
    ),
    child: Text('Hello World!'),
  ),
)
</code></pre>
<p>以上代码效果如下：</p>
<ImageBuilder :source="['Snipaste_phone_container3.png']" />
<p>如果你给 Container 组件设置了 width 和 height，那么它将会按照你指定的尺寸而不是子组件的尺寸来进行布局。</p>
<pre><code class="language-dart">SafeArea(
  child: Container(
    decoration: BoxDecoration(
      color: Colors.blue,
    ),
    width: 100,
    height: 100,
    child: Text('Hello World!'),
  ),
)
</code></pre>
<p>以上代码效果如下：</p>
<ImageBuilder :source="['Snipaste_phone_container4.png']" />
<h3>1.1 关于外边距（magin）和内边距（padding）</h3>
<p>container 组件可以通过 margin 和 padding 属性来设置外边距和内边距。（flutter 中外边距和内边距的概念等同于 web 开发中的 margin 和 padding）</p>
<p>生成内外边距的方法：</p>
<ul>
<li>EdgeInsets.all 生成四个方向上都相同的内外边距</li>
<li>EdgeInsets.symmetric 按照水平或垂直方向生成内外边距</li>
<li>EdgeInsets.fromLTRB 按照左、上、右、下四个方向生成内外边距</li>
<li>EdgeInsets.only 按照指定方向生成内外边距</li>
</ul>
<pre><code class="language-dart">SafeArea(
  child: Container(
    // margin: EdgeInsets.all(10),
    // padding: EdgeInsets.symmetric(horizontal: 20, vertical: 10),
    margin: const EdgeInsets.fromLTRB(10, 10, 10, 10),
    padding:
        const EdgeInsets.only(left: 20, top: 10, right: 20, bottom: 10),
    decoration: const BoxDecoration(
      color: Colors.blue,
    ),
    width: 100,
    height: 100,
    child: const Text('Hello World!'),
  ),
),

</code></pre>
<h2>2. Rows 和 Columns 组件</h2>
<p>Rows 和 Columns 组件同样是 Flutter 中的<code>布局组件</code>，可以类比为 web 开发中的 flex 布局。</p>
<p>它们都属于多子组件的容器，接受<code>多个</code> child 参数作为子组件，入口参数为<code>children</code>， children 指定的子组件类型<strong>可以是任何 widget 或 widget 集合，包括其他的 Rows 和 Columns 组件</strong>。</p>
<pre><code class="language-dart">SafeArea(
  child: Column(
    children: [
      Container(
        decoration: const BoxDecoration(
          color: Colors.blue,
        ),
        width: 100,
        height: 100,
        child: const Text('Hello World!'),
      ),
      Container(
        decoration: const BoxDecoration(
          color: Colors.yellow,
        ),
        width: 100,
        height: 100,
        child: const Text('Hello World!'),
      ),
      Container(
        decoration: const BoxDecoration(
          color: Colors.green,
        ),
        width: 100,
        height: 100,
        child: const Text('Hello World!'),
      ),
    ],
  ),
),
</code></pre>
<p>以上代码效果如下：</p>
<ImageBuilder :source="['Snipaste_phone_rows_columns.jpg']" />
<p><strong>Columns 组件总是会在垂直方向上尽可能的占用空间，而 Rows 组件总是在水平方向上尽可能的占用空间。</strong></p>
<p>如图所示：</p>
<ImageBuilder :source="['Snipaste_phone_rows_columns2.png']" />
<blockquote>
<p>如果你希望更改这个默认行为，可以通过更改 mainAxisSize 属性来控制 Rows 和 Columns 组件在主轴方向上的尺寸分配。</p>
<pre><code class="language-dart">Column(
  mainAxisSize: MainAxisSize.min,
)
</code></pre>
</blockquote>
<p>另外，Columns 组件还可以设置 verticalDirection 属性来控制子组件的排列方向。</p>
<pre><code class="language-dart">
SafeArea(
  child: Column(
    // mainAxisSize: MainAxisSize.min,
    verticalDirection: VerticalDirection.up,
    children: [
      Container(
        decoration: const BoxDecoration(
          color: Colors.blue,
        ),
        width: 100,
        height: 100,
        child: const Text('Hello World!'),
      ),
      Container(
        decoration: const BoxDecoration(
          color: Colors.yellow,
        ),
        width: 100,
        height: 100,
        child: const Text('Hello World!'),
      ),
      Container(
        decoration: const BoxDecoration(
          color: Colors.green,
        ),
        width: 100,
        height: 100,
        child: const Text('Hello World!'),
      ),
    ],
  ),
)

</code></pre>
<p>以上代码效果如下：</p>
<ImageBuilder :source="['Snipaste_phone_rows_columns3.jpg']" />
<p>以及，通过 <code>mainAxisAlignment</code> 属性来控制子组件在主轴方向上的对齐方式，有效的值有：</p>
<ul>
<li>MainAxisAlignment.start</li>
<li>MainAxisAlignment.end</li>
<li>MainAxisAlignment.center</li>
<li>MainAxisAlignment.spaceBetween</li>
<li>MainAxisAlignment.spaceAround</li>
<li>MainAxisAlignment.spaceEvenly 子组件间距均匀分布</li>
</ul>
<p>通过 <code>crossAxisAlignment</code> 属性来控制子组件在交叉轴方向上的对齐方式，有效的值有：</p>
<ul>
<li>CrossAxisAlignment.start</li>
<li>CrossAxisAlignment.end</li>
<li>CrossAxisAlignment.center</li>
<li>CrossAxisAlignment.stretch 拉伸子组件，占满交叉轴方向的全部空间</li>
<li>CrossAxisAlignment.baseline</li>
</ul>
<p><strong>这些基本上和 web 开发中的 flex 布局的概念是一致的， mainAxisAlignment 和 crossAxisAlignment 也和 justify-content 和 align-items 相对应</strong></p>
<h2>3. Image 组件与图片导入</h2>
<p>Image 组件是 Flutter 中的<code>图片组件</code>，用来展示图片。</p>
<p>它提供多种构造函数，用于指定加载图像的多种方式：</p>
<ul>
<li>Image.asset 加载本地资源图片</li>
<li>Image.network 加载网络图片</li>
<li>Image.file 加载本地文件图片</li>
</ul>
<p><a href="https://api.flutter-io.cn/flutter/widgets/Image-class.html">查看上述方式的详细用法</a></p>
<p>Image 组件支持的图片格式有： <strong>JPEG, PNG, GIF, Animated GIF, WebP, Animated WebP, BMP, and WBMP</strong>。</p>
<p>在默认的构造函数中，通过<code>image</code>参数传入一个指定的<code>ImageProvider</code>类型的值，就可以加载指定的图片。</p>
<p><code>ImageProvider</code> 是一个抽象类，用于提供图片资源。常见的 ImageProvider 类型有 <code>AssetImage</code>、<code>NetworkImage</code>、<code>FileImage</code> 等。</p>
<pre><code class="language-dart"> Image(
  image: AssetImage('assets/images/xxx.png'),
  width: 100,
  height: 100,
),
</code></pre>
<blockquote>
<p>需要注意的是，在使用<code>AssetImage</code>类型的<code>ImageProvider</code>时，需要先在 pubspec.yaml 文件中配置图片资源路径来导入图片资源。</p>
<ImageBuilder :source="['Snipaste_phone_image.png']" />
</blockquote>
<h2>4. Text 组件与自定义字体</h2>
<p>Text 组件是 Flutter 中的<code>文本组件</code>，用来展示文本。</p>
<p>通过指定<code>style</code>参数，可以设置文本的字体大小、颜色、粗细、斜体等样式。<a href="https://api.flutter-io.cn/flutter/widgets/Text-class.html">查看更多样式设置</a></p>
<pre><code class="language-dart">Text(
  'Hello World!',
  style: TextStyle(
    fontSize: 20,
    color: Colors.blue,
    fontWeight: FontWeight.bold,
    fontStyle: FontStyle.italic,
  ),
),
</code></pre>
<p>以上代码效果如下：</p>
<ImageBuilder :source="['Snipaste_phone_text.png']" />
<h3>4.1 自定义字体</h3>
<p>Flutter 支持自定义字体，通过 <code>fontFamily</code> 参数指定字体名称，就可以使用该字体渲染文本。</p>
<pre><code class="language-dart">const Text(
  'Hello World!',
  style: TextStyle(
    fontSize: 20,
    color: Colors.blue,
    fontWeight: FontWeight.bold,
    fontStyle: FontStyle.italic,
    fontFamily: 'PlaywriteDEGrund',
  ),
),
</code></pre>
<p>以上代码效果如下：</p>
<ImageBuilder :source="['Snipaste_phone_custom_font2.png']" />
<blockquote>
<p>需要注意的是，自定义字体同样需要在 pubspec.yaml 文件中配置和导入。</p>
<ImageBuilder :source="['Snipaste_phone_custom_font.png']" />
</blockquote>
<h2>5. Icon 组件</h2>
<p>Icon 组件是 Flutter 中的<code>图标组件</code>，用来展示具体的图标类型。</p>
<p>通常的做法是<strong>通过指定 flutter 中预定义的 material IconData 枚举值来展示具体的图标</strong>。<a href="https://api.flutter-io.cn/flutter/material/Icons-class.html">查看所有图标类型</a></p>
<pre><code class="language-dart">Icon(
  Icons.favorite,
  size: 30,
  color: Colors.red,
),
</code></pre>
<p>以上代码效果如下：</p>
<ImageBuilder :source="['Snipaste_phone_icon.png']" />
<h2>6. Expanded 组件</h2>
<p>Expanded 组件同样是 Flutter 中的<code>布局组件</code>，它可以用来扩展其子组件的尺寸。</p>
<p>使用 <strong>Expanded 组件可以使 Row、Column 或 Flex 布局的子元素沿着主轴扩展以填充可用空间</strong>（例如，对于 Row 是水平扩展，对于 Column 是垂直扩展）。<strong>如果有多个子元素扩展，可用空间将根据弹性因子<code>flex</code>按比例在它们之间进行分配</strong>。</p>
<blockquote>
<p>注意： Expanded 组件只能作为 Row、Column 或 Flex 布局的子元素使用。</p>
</blockquote>
<p><a href="https://api.flutter-io.cn/flutter/widgets/Expanded-class.html">查看更多 Expanded 组件用法</a></p>
<pre><code class="language-dart">Row(
  children: [
    Expanded(
      flex: 2, // 比例因子
      child: Container(
        decoration: BoxDecoration(
          color: Colors.blue,
        ),
        width: 100, // 这里设置的宽度不会生效
        height: 100,
        child: Text('Hello World!'),
      ),
    ),
    Expanded(
      child: Container(
        decoration: BoxDecoration(
          color: Colors.yellow,
        ),
        width: 100, // 这里设置的宽度不会生效
        height: 100,
        child: Text('Hello World!'),
      ),
    ),
    Expanded(
      flex: 2, // 比例因子
      child: Container(
        decoration: BoxDecoration(
          color: Colors.green,
        ),
        width: 100, // 这里设置的宽度不会生效
        height: 100,
        child: Text('Hello World!'),
      ),
    ),
  ],
),
</code></pre>
<p>以上代码效果如下：</p>
<ImageBuilder :source="['Snipaste_phone_expanded.png']" />
<h2>7. Padding 组件</h2>
<p>Padding 组件也是 Flutter 中的<code>布局组件</code>之一，用来给父组件添加内边距。</p>
<p>它接受<code>一个</code> padding 参数，该参数是一个<code>EdgeInsetsGeometry</code>类型的值，用来设置四个方向上的内边距。</p>
<p>具体用法和 Container 组件中的 padding 属性类似。<a href="#_1-1-%E5%85%B3%E4%BA%8E%E5%A4%96%E8%BE%B9%E8%B7%9D-magin-%E5%92%8C%E5%86%85%E8%BE%B9%E8%B7%9D-padding">回到 1.1</a></p>
<p><a href="https://api.flutter-io.cn/flutter/widgets/Padding-class.html">更多 Padding 组件用法</a></p>
<pre><code class="language-dart">Padding(
  padding: const EdgeInsets.all(20),
  child: Container(
    decoration: BoxDecoration(
      color: Colors.blue,
    ),
    width: 100,
    height: 100,
    child: Text('Hello World!'),
  ),
),
</code></pre>
]]></content>
        <author>
            <name>Clark Cui</name>
            <email>rongchuancui@gmail.com</email>
            <uri>https://clark-cui.top</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[事件循环]]></title>
        <id>https://clark-cui.top/posts/事件循环.html</id>
        <link href="https://clark-cui.top/posts/事件循环.html"/>
        <updated>2024-03-12T00:00:00.000Z</updated>
        <content type="html"><![CDATA[<h2>浏览器的进程模型</h2>
<h3>进程与线程</h3>
<p>进程是正在运行的<u>程序的实例</u>，每个进程都有自己<u>独立的</u>一块内存空间，有了进程之后，才可以运行程序的代码。一个进程至少有一个线程，叫做主线程，一个进程也可以运行多个线程，多个线程可以共享数据。</p>
<h3>浏览器是一个多进程多线程的应用程序</h3>
<p>浏览器是一个极其复杂的应用程序</p>
<p>为了避免多个功能之间的相互影响，减少崩溃的几率，浏览器在启动的时候会启动多个进程。</p>
<p><strong>其中，最主要的进程有</strong>：</p>
<ol>
<li>
<p><strong>浏览器进程</strong></p>
<p>负责界面显示、用户交互、子进程管理等。</p>
</li>
<li>
<p><strong>网络进程</strong></p>
<p>负责网络通信，各种资源的加载。</p>
</li>
<li>
<p><strong>渲染进程</strong></p>
<p>每个标签页都是一个新的渲染进程，渲染进程的主线程负责执行 HTML、CSS、JS 代码</p>
</li>
</ol>
<h3>渲染主线程是如何工作的</h3>
<p>渲染主线程是浏览器中最繁忙的线程，它处理的任务包括：</p>
<ul>
<li>
<p>解析 html</p>
</li>
<li>
<p>解析 css</p>
</li>
<li>
<p>计算样式</p>
</li>
<li>
<p>布局</p>
</li>
<li>
<p>处理图层</p>
</li>
<li>
<p>每秒把页面画 60 次</p>
</li>
<li>
<p>执行全局 js 代码</p>
</li>
<li>
<p>处理事件函数</p>
</li>
<li>
<p>执行计时器的回调</p>
</li>
<li>
<p>......</p>
</li>
</ul>
<p>为了处理这么多任务的调度，主线程想出了一个办法：队列</p>
<p>当渲染<u>主线程正在执行任务</u>时，由渲染主线程和浏览器<u>其他</u>线程安排的<u>任务</u>会被暂时放<u>到队列中等待执行</u>，当渲染<u>主线程中的任务执行完毕</u>，会<u>从队列中依次取出</u>排队的任务进行<u>执行</u>。</p>
<ol>
<li>
<p>在最开始的时候，渲染主线程会进入一个无线循环</p>
<pre><code class="language-cpp">for(;;){

}
</code></pre>
</li>
<li>
<p>每一次循环会检查队列中是否有任务存在，如果有，就取出第一个任务进行执行，执行完后进入下一次循环；如果没有，则进入休眠状态。</p>
</li>
<li>
<p>其他所有的线程（包括其他进程的线程）可以随时向队列添加任务，新添加的任务会被放到队列的末尾。添加任务时，如果主线程是休眠状态，则唤醒</p>
</li>
</ol>
<h3>何为异步？</h3>
<p>在代码执行的过程中，无法立即处理（需要等待）的任务就是异步任务，比如：</p>
<ul>
<li>
<p>计时器安排的任务 <code>setTimeout</code>、<code>setInterval</code></p>
</li>
<li>
<p>网络通信后执行的任务 <code>XHR</code>、<code>fetch</code></p>
</li>
<li>
<p>用户操作后执行的任务 <code>addEventListner</code></p>
</li>
</ul>
<p>渲染主线程不会等待以上任务的执行，而是继续执行主线程需要执行的代码。当以上任务（由浏览器的其他进程）执行完成时，会把执行后的结果放到队列中进行等待（直到主线程清空后依次从队列中取出）。</p>
<h3>JS 代码为何会阻塞渲染</h3>
<p>因为 js 代码和页面渲染都会在渲染主线程中进行执行，而页面的重绘是异步的过程，需要等待主线程的 js 代码执行完毕。</p>
<h3>队列中的任务有优先级吗？</h3>
<p>队列中的任务没有优先级，都是先进先出</p>
<p>但是<u>队列有优先级</u></p>
<ul>
<li>
<p>每个任务都有一个任务类型，同一个类型的任务必须在同一个队列，不同类型的任务可以分属不同的队列。在一次事件循环中，浏览器可以根据实际情况从不同队列中取出任务执行</p>
</li>
<li>
<p>浏览器必须准备好一个微队列，<u>微队列中的任务优先于其他所有任务执行</u>（btw:微队列，vip 的 v）</p>
<p>添加任务到微队列的方式 <code>Promsie</code> 和<code>MutationObserver</code></p>
<pre><code class="language-javascript">// 立刻把一个函数放到微队列
Promise.resolve().then(函数)
</code></pre>
</li>
</ul>
]]></content>
        <author>
            <name>Clark Cui</name>
            <email>rongchuancui@gmail.com</email>
            <uri>https://clark-cui.top</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[测试文章]]></title>
        <id>https://clark-cui.top/posts/作为测试文章.html</id>
        <link href="https://clark-cui.top/posts/作为测试文章.html"/>
        <updated>2024-02-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[测试测试]]></summary>
        <content type="html"><![CDATA[<h1>测试一下呢呢</h1>
<p>测试测试</p>
<pre><code class="language-javascript">console.log('test test')
</code></pre>
]]></content>
        <author>
            <name>Clark Cui</name>
            <email>rongchuancui@gmail.com</email>
            <uri>https://clark-cui.top</uri>
        </author>
    </entry>
</feed>